
==================== FINAL INTERFACE ====================
2018-04-08 09:58:12.01116 UTC

interface main@main:Examples.SampleContracts 7103
  interface hash: c2894acf725a9ae51331281323c5d0ec
  ABI hash: 75848cacf0c2b730f50c109f867fa9d3
  export-list hash: 28ea68b9e87e56fb41601c99e7379f01
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 1a0c5b7283b0d9a3f34f367fbca4918b
  sig of: Nothing
  used TH splices: False
  where
exports:
  Examples.SampleContracts.barrier
  Examples.SampleContracts.composite
  Examples.SampleContracts.european
  Examples.SampleContracts.european'
  Examples.SampleContracts.parseDate
  Examples.SampleContracts.simple
  Examples.SampleContracts.templateEx
  Examples.SampleContracts.twoCF
  Examples.SampleContracts.worstOff
module dependencies: BaseTypes Contract EDSL HOAS PrettyPrinting
                     RebindableEDSL
package dependencies: array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA
                      base-4.8.2.0 containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU
                      deepseq-1.4.1.1@deeps_6vMKxt5sPFR0XsbRWvvq59 ghc-prim-0.4.0.0
                      integer-gmp-1.0.0.0 time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
         main@main:HOAS main@main:PrettyPrinting
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.Calendar.Gregorian
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.Format.Parse
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.LocalTime.LocalTime
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Functor.Identity
                         base-4.8.2.0:Data.Monoid base-4.8.2.0:Data.Type.Equality
                         base-4.8.2.0:Data.Void base-4.8.2.0:GHC.Exts
                         base-4.8.2.0:GHC.Generics
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Set.Base
import  -/  base-4.8.2.0:Data.Foldable 2ce969969ad5231eb40bd713f94f05ad
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.List 0c736920522bbd14b770342776012ab6
import  -/  base-4.8.2.0:GHC.Num 9f42750c866f5832ca565146bd660c60
import  -/  base-4.8.2.0:GHC.Real 1281efa9baf803bc7859d7efb89a38b3
import  -/  base-4.8.2.0:GHC.Show 0e1d8380a8fb0cfb07ebeda3b70cbf38
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  BaseTypes 65c5f953f1981ab087685c5da86fba76
  EUR f5e7aafdef4ba43fb11832949e03491f
  Stock 072d1222ca60b7277ef5aee0921b438d
  X d0fa2e26fd9bb1d70762cd30ecc77def
  Y d2b554c47d69c971910282357174aac8
import  -/  Contract a001d2d1dcba9b7dbff93220b44302c9
  exports: 03296e9aefab777c45a744199fc35678
  Tvar 6384254a7faf76e34eb54b2c4dc085fa
import  -/  HOAS 30142d8132ad9fdb45a0c9d1ca0fdc65
  ! d9840583a6ff9b5e2d7c0e4ab767dd22
  !|! 6120d46e453f223c26cec00d0440c665
  # 3c9ad694a72b4837af3e4a766a2be99c
  & 38736f5544e5a01891f7467caa07da3e
  Contr 41b09272fc4d23d4addccdd83f150c68
  both 348ee766f3de36e743b1ae4390a198e3
  iff 3e8b17a3bae40e3308028390ad23b98f
  rObs 33ca9c674a79874ed3e3e422529c808a
  scale 0d3659bf4922f82de92e7bfd2b95b3ec
  transfer 754343aba24b3e57921527c9140d584f
  translate 3455c1e457d6ab99cbc58f619f067d2b
  translateT b1bfd22cb2153a801bb82dad59459fef
  zero f1220e1a462c5917830fd140860efa27
import  -/  RebindableEDSL 1f05f6deb5408b4f1cddcc8c5c740823
  exports: 5974c7b2497ba37caa197c494e2ec138
  < e53fb390d08292e51ae08912d99bedb8
  <= 6f9ead4ed5fce5d8e20429fe2f43d415
  ifThenElse cf52398ada3b0b0686200f3a702c62f9
  max 14f06c4903db11b8c50b019edfc577e6
  min a6277077501c8877eec8004c13823575
  not a8187861e844aa0deb7504c8ca36f338
  withinT 68be0334606360cb12223fa7de1a6037
import  -/  time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time 05c0775841fb44d3c8063cb78d933b0f
import  -/  time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.Calendar.Days 6bb3f771ace440999ea38fb6f4696368
import  -/  time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.Format 89df0cc5f3f5dca794e420f6f7ba2b33
import  -/  time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.Format.Locale 64776fc50baf19481e46ad54862aa96f
import  -/  time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.Format.Parse 13e51474833a3060cca8b953672f70cd
42d3e036b11b5fa3d2d5ba4575ba9390
  barrier :: HOAS.Contr
  {- Arity: 1,
     Strictness: <S(LLLLLLLLLC(C(C(C(S))))L),U(1*U,1*U,A,1*C1(C1(U)),A,1*C1(C1(C1(U))),A,A,A,1*C1(C1(C1(C1(U)))),A)>,
     Unfolding: (\ @ (exp :: * -> *)
                   @ contr
                   $dContrHoas :: HOAS.ContrHoas exp contr ->
                 let {
                   $dExpHoas :: HOAS.ExpHoas exp
                   = HOAS.$p1ContrHoas @ exp @ contr $dContrHoas
                 } in
                 let {
                   $dFractional :: GHC.Real.Fractional (exp HOAS.R)
                   = HOAS.$p2ExpHoas @ exp $dExpHoas
                 } in
                 let {
                   $dNum :: GHC.Num.Num (exp HOAS.R)
                   = GHC.Real.$p1Fractional @ (exp HOAS.R) $dFractional
                 } in
                 HOAS.ifWithinT
                   @ exp
                   @ contr
                   $dContrHoas
                   (HOAS.opE
                      @ exp
                      (HOAS.$p3ExpHoas @ exp $dExpHoas)
                      @ HOAS.R
                      @ HOAS.B
                      Contract.Leq
                      (GHC.Types.:
                         @ (exp HOAS.R)
                         (HOAS.obs
                            @ exp
                            (HOAS.$p3ExpHoas @ exp $dExpHoas)
                            @ HOAS.R
                            Examples.SampleContracts.barrier6
                            Examples.SampleContracts.barrier5)
                         (GHC.Types.:
                            @ (exp HOAS.R)
                            (GHC.Num.fromInteger
                               @ (exp HOAS.R)
                               $dNum
                               Examples.SampleContracts.barrier4)
                            (GHC.Types.[] @ (exp HOAS.R)))))
                   Examples.SampleContracts.barrier2
                   (HOAS.zero @ exp @ contr $dContrHoas)
                   (HOAS.scale
                      @ exp
                      @ contr
                      $dContrHoas
                      (GHC.Num.fromInteger
                         @ (exp HOAS.R)
                         $dNum
                         Examples.SampleContracts.barrier1)
                      (HOAS.transfer
                         @ exp
                         @ contr
                         $dContrHoas
                         BaseTypes.X
                         BaseTypes.Y
                         BaseTypes.EUR))) -}
8fd64148d13c95a1793dbca66134d676
  barrier1 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (__integer 2000) -}
bf9222e086167b9d5ae25f003d492fad
  barrier2 :: Contract.TExpr
  {- Strictness: m1,
     Unfolding: (Contract.Tvar Examples.SampleContracts.barrier3) -}
c3641397184ce726da9d16a38eb4f594
  barrier3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "maturity"#) -}
0fbbd3479c370e7c35ef408afcb69e03
  barrier4 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (__integer 4000) -}
4b57c6a9a1255dc281dffcf8e6cd8674
  barrier5 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0) -}
fde313ad9f3e7bde7060ef37e0196132
  barrier6 :: Contract.ObsLabel
  {- Unfolding: (Contract.LabR Examples.SampleContracts.barrier7) -}
3e328ed6938a1049e8eaa365485f6af3
  barrier7 :: BaseTypes.RealObs
  {- Strictness: m2,
     Unfolding: (BaseTypes.Stock Examples.SampleContracts.barrier8) -}
c4ec1c4a58c9e633956b7cd370f0abcb
  barrier8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DJ_Eurostoxx_50"#) -}
a3fe04fb8c4048dfd70eaa2de5de9f56
  composite :: HOAS.Contr
  {- Arity: 1,
     Strictness: <S(LLLLC(C(S))LLLLLL),U(U(U,U(U(U,U,U,U,U,U,U),U,U,U),U),U,A,C(C1(U)),1*C1(C1(U)),C(C1(C1(U))),C(C1(U)),A,C(C1(C1(C1(U)))),A,A)>,
     Unfolding: (\ @ (exp :: * -> *)
                   @ contr
                   $dContrHoas :: HOAS.ContrHoas exp contr ->
                 HOAS.both
                   @ exp
                   @ contr
                   $dContrHoas
                   (Examples.SampleContracts.european' @ exp @ contr $dContrHoas)
                   (HOAS.translate
                      @ exp
                      @ contr
                      $dContrHoas
                      Examples.SampleContracts.composite1
                      (Examples.SampleContracts.simple @ exp @ contr $dContrHoas))) -}
45c55a64afb177a32d186b10ff3ea7e8
  composite1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 366) -}
541474eb0c98dd145a4d3569f33260e4
  european :: HOAS.Contr
  {- Arity: 1,
     Strictness: <S(LLLLLLC(C(S))LLLL),U(1*U,A,A,1*C1(C1(U)),A,1*C1(C1(C1(U))),1*C1(C1(U)),A,A,A,A)>,
     Unfolding: (\ @ (exp :: * -> *)
                   @ contr
                   $dContrHoas :: HOAS.ContrHoas exp contr ->
                 HOAS.translate
                   @ exp
                   @ contr
                   $dContrHoas
                   Examples.SampleContracts.european'1
                   (HOAS.scale
                      @ exp
                      @ contr
                      $dContrHoas
                      (let {
                         $dExpHoas :: HOAS.ExpHoas exp
                         = HOAS.$p1ContrHoas @ exp @ contr $dContrHoas
                       } in
                       let {
                         $dFractional :: GHC.Real.Fractional (exp HOAS.R)
                         = HOAS.$p2ExpHoas @ exp $dExpHoas
                       } in
                       let {
                         $dNum :: GHC.Num.Num (exp HOAS.R)
                         = GHC.Real.$p1Fractional @ (exp HOAS.R) $dFractional
                       } in
                       RebindableEDSL.$fMaxexp_$cmax
                         @ exp
                         $dExpHoas
                         (GHC.Num.fromInteger
                            @ (exp HOAS.R)
                            $dNum
                            Examples.SampleContracts.european1)
                         (GHC.Num.-
                            @ (exp HOAS.R)
                            $dNum
                            (HOAS.obs
                               @ exp
                               (HOAS.$p3ExpHoas @ exp $dExpHoas)
                               @ HOAS.R
                               Examples.SampleContracts.barrier6
                               Examples.SampleContracts.barrier5)
                            (GHC.Num.fromInteger
                               @ (exp HOAS.R)
                               $dNum
                               Examples.SampleContracts.barrier4)))
                      (HOAS.transfer
                         @ exp
                         @ contr
                         $dContrHoas
                         BaseTypes.X
                         BaseTypes.Y
                         BaseTypes.EUR))) -}
9c37ca0154a990493f6ef5b8838177c2
  european' :: HOAS.Contr
  {- Arity: 1,
     Strictness: <S(LLLLLLC(C(S))LLLL),U(1*U,1*U,A,1*C1(C1(U)),A,1*C1(C1(C1(U))),1*C1(C1(U)),A,1*C1(C1(C1(C1(U)))),A,A)>,
     Unfolding: (\ @ (exp :: * -> *)
                   @ contr
                   $dContrHoas :: HOAS.ContrHoas exp contr ->
                 HOAS.translate
                   @ exp
                   @ contr
                   $dContrHoas
                   Examples.SampleContracts.european'1
                   (let {
                      $dExpHoas :: HOAS.ExpHoas exp
                      = HOAS.$p1ContrHoas @ exp @ contr $dContrHoas
                    } in
                    let {
                      $dFractional :: GHC.Real.Fractional (exp HOAS.R)
                      = HOAS.$p2ExpHoas @ exp $dExpHoas
                    } in
                    let {
                      $dNum :: GHC.Num.Num (exp HOAS.R)
                      = GHC.Real.$p1Fractional @ (exp HOAS.R) $dFractional
                    } in
                    let {
                      strike :: exp HOAS.R
                      = GHC.Num.fromInteger
                          @ (exp HOAS.R)
                          $dNum
                          Examples.SampleContracts.barrier4
                    } in
                    let {
                      theObs :: exp HOAS.R
                      = HOAS.obs
                          @ exp
                          (HOAS.$p3ExpHoas @ exp $dExpHoas)
                          @ HOAS.R
                          Examples.SampleContracts.barrier6
                          Examples.SampleContracts.barrier5
                    } in
                    HOAS.ifWithin
                      @ exp
                      @ contr
                      $dContrHoas
                      (HOAS.opE
                         @ exp
                         (HOAS.$p3ExpHoas @ exp $dExpHoas)
                         @ HOAS.R
                         @ HOAS.B
                         Contract.Less
                         (GHC.Types.:
                            @ (exp HOAS.R)
                            strike
                            (GHC.Types.: @ (exp HOAS.R) theObs (GHC.Types.[] @ (exp HOAS.R)))))
                      HOAS.$fShowContr2
                      (HOAS.scale
                         @ exp
                         @ contr
                         $dContrHoas
                         (GHC.Num.- @ (exp HOAS.R) $dNum theObs strike)
                         (HOAS.transfer
                            @ exp
                            @ contr
                            $dContrHoas
                            BaseTypes.X
                            BaseTypes.Y
                            BaseTypes.EUR))
                      (HOAS.zero @ exp @ contr $dContrHoas))) -}
703d36dc1eedbd42864a283457a7b412
  european'1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 365) -}
ab925aab537f4ce7a6386c1ba7fd4cfe
  european1 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (__integer 0) -}
c3cb1f426457bb717b7f14dae2703c61
  parseDate :: GHC.Base.String -> Data.Time.Calendar.Days.Day
  {- Arity: 1,
     Unfolding: (Data.Time.Format.Parse.parseTimeOrError
                   @ Data.Time.Calendar.Days.Day
                   Data.Time.Format.Parse.$fParseTimeDay_$cbuildTime
                     `cast`
                   (Sym (Data.Time.Format.Parse.NTCo:ParseTime[0]
                             <Data.Time.Calendar.Days.Day>_N))
                   GHC.Types.True
                   Data.Time.Format.Locale.defaultTimeLocale
                   Examples.SampleContracts.parseDate1) -}
2a0f0a7b4d8298623648c2c87408feda
  parseDate1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "%Y-%m-%d"#) -}
b97bb7f7bdb4f3b50f6a9ef7300c3337
  simple :: HOAS.Contr
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLC(C(S))LLLLLLL),U(1*U(A,1*U(1*U(A,A,A,A,A,A,1*C1(U)),A,A,A),A),A,A,1*C1(C1(U)),A,1*C1(C1(C1(U))),A,A,A,A,A)>,
     Unfolding: (\ @ (exp :: * -> *)
                   @ contr
                   $dContrHoas :: HOAS.ContrHoas exp contr ->
                 HOAS.scale
                   @ exp
                   @ contr
                   $dContrHoas
                   (GHC.Num.fromInteger
                      @ (exp HOAS.R)
                      (GHC.Real.$p1Fractional
                         @ (exp HOAS.R)
                         (HOAS.$p2ExpHoas
                            @ exp
                            (HOAS.$p1ContrHoas @ exp @ contr $dContrHoas)))
                      Examples.SampleContracts.simple1)
                   (HOAS.transfer
                      @ exp
                      @ contr
                      $dContrHoas
                      BaseTypes.X
                      BaseTypes.Y
                      BaseTypes.EUR)) -}
b6ae25f679a276b1d56bef3b1205a359
  simple1 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (__integer 100) -}
5a619290af5dc3fec7b9e65d0c22b18c
  templateEx :: HOAS.Contr
  {- Arity: 1,
     Strictness: <S(LLLLLLLC(C(S))LLL),U(1*U,1*U,A,C(C1(U)),1*C1(C1(U)),C(C1(C1(U))),A,C(C1(U)),1*C1(C1(C1(C1(U)))),A,A)>,
     Unfolding: (\ @ (exp :: * -> *)
                   @ contr
                   $dContrHoas :: HOAS.ContrHoas exp contr ->
                 HOAS.translateT
                   @ exp
                   @ contr
                   $dContrHoas
                   Examples.SampleContracts.templateEx6
                   (let {
                      $dExpHoas :: HOAS.ExpHoas exp
                      = HOAS.$p1ContrHoas @ exp @ contr $dContrHoas
                    } in
                    let {
                      $dFractional :: GHC.Real.Fractional (exp HOAS.R)
                      = HOAS.$p2ExpHoas @ exp $dExpHoas
                    } in
                    let {
                      $dNum :: GHC.Num.Num (exp HOAS.R)
                      = GHC.Real.$p1Fractional @ (exp HOAS.R) $dFractional
                    } in
                    HOAS.both
                      @ exp
                      @ contr
                      $dContrHoas
                      (HOAS.scale
                         @ exp
                         @ contr
                         $dContrHoas
                         (GHC.Num.fromInteger
                            @ (exp HOAS.R)
                            $dNum
                            Examples.SampleContracts.simple1)
                         (HOAS.transfer
                            @ exp
                            @ contr
                            $dContrHoas
                            BaseTypes.X
                            BaseTypes.Y
                            BaseTypes.EUR))
                      (HOAS.translateT
                         @ exp
                         @ contr
                         $dContrHoas
                         Examples.SampleContracts.templateEx4
                         (let {
                            theObs :: exp HOAS.R
                            = HOAS.obs
                                @ exp
                                (HOAS.$p3ExpHoas @ exp $dExpHoas)
                                @ HOAS.R
                                Examples.SampleContracts.templateEx1
                                Examples.SampleContracts.barrier5
                          } in
                          HOAS.ifWithin
                            @ exp
                            @ contr
                            $dContrHoas
                            (HOAS.opE
                               @ exp
                               (HOAS.$p3ExpHoas @ exp $dExpHoas)
                               @ HOAS.R
                               @ HOAS.B
                               Contract.Less
                               (GHC.Types.:
                                  @ (exp HOAS.R)
                                  (GHC.Num.fromInteger
                                     @ (exp HOAS.R)
                                     $dNum
                                     Examples.SampleContracts.simple1)
                                  (GHC.Types.:
                                     @ (exp HOAS.R)
                                     theObs
                                     (GHC.Types.[] @ (exp HOAS.R)))))
                            HOAS.$fShowContr2
                            (HOAS.scale
                               @ exp
                               @ contr
                               $dContrHoas
                               (GHC.Num.*
                                  @ (exp HOAS.R)
                                  $dNum
                                  theObs
                                  (GHC.Num.fromInteger
                                     @ (exp HOAS.R)
                                     $dNum
                                     Examples.SampleContracts.simple1))
                               (HOAS.transfer
                                  @ exp
                                  @ contr
                                  $dContrHoas
                                  BaseTypes.X
                                  BaseTypes.Y
                                  BaseTypes.EUR))
                            (HOAS.zero @ exp @ contr $dContrHoas))))) -}
945d38c6d1a4bc7531b04939c2e1d4e9
  templateEx1 :: Contract.ObsLabel
  {- Unfolding: (Contract.LabR
                   Examples.SampleContracts.templateEx2) -}
06e6862d09b0375d77f7158731120070
  templateEx2 :: BaseTypes.RealObs
  {- Strictness: m2,
     Unfolding: (BaseTypes.Stock
                   Examples.SampleContracts.templateEx3) -}
07e7c02946d175cd933ae9382f34dba7
  templateEx3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "AAPL"#) -}
4d87305b65092cf7d3e1079dcf17ccd4
  templateEx4 :: Contract.TExpr
  {- Strictness: m1,
     Unfolding: (Contract.Tvar Examples.SampleContracts.templateEx5) -}
22b80e9b9dff79cc9b4a31c75ed63c98
  templateEx5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "t1"#) -}
68a6aa3bf2911d5b82c0841f048de906
  templateEx6 :: Contract.TExpr
  {- Strictness: m1,
     Unfolding: (Contract.Tvar Examples.SampleContracts.templateEx7) -}
55adafee9a8a93c8641bd27613be6b28
  templateEx7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "t0"#) -}
b5d269e59d63285835156be9757527c0
  twoCF :: HOAS.Contr
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLC(C(S))LLLLLL),U(1*U,A,A,C(C1(U)),1*C1(C1(U)),C(C1(C1(U))),1*C1(C1(U)),A,A,A,A)>,
     Unfolding: (\ @ (exp :: * -> *)
                   @ contr
                   $dContrHoas :: HOAS.ContrHoas exp contr ->
                 let {
                   $dExpHoas :: HOAS.ExpHoas exp
                   = HOAS.$p1ContrHoas @ exp @ contr $dContrHoas
                 } in
                 let {
                   $dFractional :: GHC.Real.Fractional (exp HOAS.R)
                   = HOAS.$p2ExpHoas @ exp $dExpHoas
                 } in
                 let {
                   $dNum :: GHC.Num.Num (exp HOAS.R)
                   = GHC.Real.$p1Fractional @ (exp HOAS.R) $dFractional
                 } in
                 HOAS.both
                   @ exp
                   @ contr
                   $dContrHoas
                   (HOAS.scale
                      @ exp
                      @ contr
                      $dContrHoas
                      (GHC.Num.fromInteger
                         @ (exp HOAS.R)
                         $dNum
                         Examples.SampleContracts.twoCF2)
                      (HOAS.transfer
                         @ exp
                         @ contr
                         $dContrHoas
                         BaseTypes.X
                         BaseTypes.Y
                         BaseTypes.EUR))
                   (HOAS.translate
                      @ exp
                      @ contr
                      $dContrHoas
                      Examples.SampleContracts.twoCF1
                      (HOAS.scale
                         @ exp
                         @ contr
                         $dContrHoas
                         (GHC.Num.fromInteger
                            @ (exp HOAS.R)
                            $dNum
                            Examples.SampleContracts.simple1)
                         (HOAS.transfer
                            @ exp
                            @ contr
                            $dContrHoas
                            BaseTypes.X
                            BaseTypes.Y
                            BaseTypes.EUR)))) -}
65cb5b65e9e9ea9c0bd27a2959aba776
  twoCF1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1) -}
0849fb3d36cfb98e797d165397c7436b
  twoCF2 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (__integer 10) -}
39047a11693125a050e773ef020f3b05
  worstOff :: HOAS.Contr
  {- Arity: 1,
     Strictness: <S,U(1*U,A,A,C(C1(U)),A,C(C1(C1(U))),C(C1(U)),A,C(C1(C1(C1(U)))),A,A)> -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

