
==================== FINAL INTERFACE ====================
2018-04-08 09:58:11.471678 UTC

interface main@main:PrettyPrinting [orphan module] 7103
  interface hash: ae133e649ea76c14e129c1a65fa9181c
  ABI hash: 5ffccb64e48b3cd654647d2ec0df3241
  export-list hash: d0fedbf2cb7709f3cb2b36b1eb2beca0
  orphan hash: f113e9c808af410d1d9442d77031c453
  flag hash: e08a1e695a3d5701efe398d91e65cc68
  sig of: Nothing
  used TH splices: False
  where
exports:
  PrettyPrinting.isZeroNum
  PrettyPrinting.parentheses
  PrettyPrinting.ppBinOp
  PrettyPrinting.ppBool
  PrettyPrinting.ppContr
  PrettyPrinting.ppExp
  PrettyPrinting.ppOp
  PrettyPrinting.ppTExpr
  PrettyPrinting.ppUnOp
  PrettyPrinting.varName
module dependencies: BaseTypes Contract
package dependencies: array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA
                      base-4.8.2.0* containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU
                      deepseq-1.4.1.1@deeps_6vMKxt5sPFR0XsbRWvvq59 ghc-prim-0.4.0.0
                      integer-gmp-1.0.0.0
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Functor.Identity
                         base-4.8.2.0:Data.Monoid base-4.8.2.0:Data.Type.Equality
                         base-4.8.2.0:Data.Void base-4.8.2.0:GHC.Exts
                         base-4.8.2.0:GHC.Generics
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Set.Base
import  -/  base-4.8.2.0:Data.Maybe 1cb58de2b04ee3c0c0a7dc9201184aff
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.Num 9f42750c866f5832ca565146bd660c60
import  -/  base-4.8.2.0:GHC.Show 0e1d8380a8fb0cfb07ebeda3b70cbf38
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  Contract a001d2d1dcba9b7dbff93220b44302c9
  exports: 03296e9aefab777c45a744199fc35678
  Acc 818351477424474cab94f88167da05c6
  Add 73efea4c084a1d9a3a6c6d9e3fd09e54
  And eddba479febe1c4e4341607c24ca439f
  BLit 227ec0371043356d3fabb57e5b39630d
  Both 37f71d6c3edba0e4c1eed54aef9f22c7
  Cond 50ca2b0b89e04ea3ceeafd81266127a2
  Contr 2b7cf2ff7abe4fab650faa1cd601f781
  Div 67c8deb0548b119b380a5d8390ef33ea
  Env' f40eda0c688bf21ccf9fd5fb36d6eaee
  Equal fa16c4c4ad7996bc920e78e1d3fcd23e
  Exp b1478d2a0af0ab23b8b9450d84006b6a
  If 4a71ae2a22dbdbf18925f5a7fc8a67b5
  LabB 8d7b6ec21f78a7809518abcda9224011
  LabR 7cb28ffb686b74dbb1694a608e78429e
  Leq 39f59e0946504d07702c2e53aca33898
  Less 654591f3520e180f2cf1a29d3ca5f45c
  Let 61bef3408cd960bb047fd385fb879c57
  Mult 0fbec099a8f25d1feffb35181cefdceb
  Neg 10124e8e948f3744bd8bd14508a9c1f2
  Not 2cd76820e4fa64f760b612e2befe6115
  Obs babd087d9016937058c8437afb05cd51
  ObsLabel 9eaec7e0150a3d9437c71b1eb0741d47
  Op 8b9a75298b057e373283c5fd1bb10843
  OpE 60a10ff16360d779467c0feb6834d961
  Or 2d308a983bd56f06ed2a97f86a1ee704
  RLit 9b694dd3701606adfc98afef128d1ede
  Scale 9778f7bc37aa3385d2b8c14453c0de8f
  Sub 32df2906535acb6f47a2a83750879f36
  TExpr b6d3d122a20c7bad1349187712a593b3
  Tnum 8cb2d18a1db4771f2c9b55a16d715216
  Transfer 592bd9ce494fe8e6c632f6f2a93b0d8d
  Translate cc1de4b5c2c819003fd876e653fa956f
  Tvar 6384254a7faf76e34eb54b2c4dc085fa
  VarE f9f5c99ef5e7c4e9d0c01b80214c0c36
  Zero 804145a4f7c70e94267edbf29f647397
  lookupEnv ca4134467f42edfb6a8eec847b6a1ed5
4524225dd6758d095694c39074aab7ca
  $fShowObsLabel :: GHC.Show.Show Contract.ObsLabel
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Contract.ObsLabel
                  PrettyPrinting.$fShowObsLabel_$cshowsPrec
                  PrettyPrinting.$fShowObsLabel_$cshow
                  PrettyPrinting.$fShowObsLabel_$cshowList -}
cdf6fabf2907832cc5a4e8346f1d71fb
  $fShowObsLabel_$cshow :: Contract.ObsLabel -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Contract.ObsLabel ->
                 case ds of wild {
                   Contract.LabR l -> BaseTypes.$fShowRealObs_$cshow l
                   Contract.LabB l -> BaseTypes.$fShowBoolObs_$cshow l }) -}
19d04d3bdfb2018556da5e52debd1168
  $fShowObsLabel_$cshowList :: [Contract.ObsLabel] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ ls :: [Contract.ObsLabel] s :: GHC.Base.String ->
                 GHC.Show.showList__
                   @ Contract.ObsLabel
                   (PrettyPrinting.$fShowObsLabel_$cshowsPrec GHC.Show.shows18)
                   ls
                   s) -}
6f55974d31618d3139c2f6e78a280d08
  $fShowObsLabel_$cshowsPrec ::
    GHC.Types.Int -> Contract.ObsLabel -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: GHC.Types.Int
                   w1 :: Contract.ObsLabel
                   w2 :: GHC.Base.String ->
                 PrettyPrinting.$w$cshowsPrec w1 w2) -}
efc8f390372805dd5d74ea8175698698
  $w$cshowsPrec ::
    Contract.ObsLabel -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ w :: Contract.ObsLabel w1 :: GHC.Base.String ->
                 case w of wild {
                   Contract.LabR l
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        (BaseTypes.$fShowRealObs_$cshowsPrec
                           GHC.Show.shows18
                           l
                           (GHC.Types.[] @ GHC.Types.Char))
                        w1
                   Contract.LabB l
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        (BaseTypes.$w$cshowsPrec1 0 l (GHC.Types.[] @ GHC.Types.Char))
                        w1 }) -}
af866e12a5956f42ec0037cfdafd3bfa
  isZeroNum :: Contract.TExpr -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Contract.TExpr ->
                 case ds of wild {
                   Contract.Tvar ipv -> GHC.Types.False
                   Contract.Tnum ds1
                   -> case ds1 of wild1 { GHC.Types.I# ds2 ->
                      case ds2 of ds3 {
                        DEFAULT -> GHC.Types.False 0 -> GHC.Types.True } } }) -}
522d8104de47c2be5ee4d7414a81f9cf
  parentheses :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: (\ str :: [GHC.Types.Char] ->
                 GHC.CString.unpackAppendCString#
                   "("#
                   (GHC.Base.++ @ GHC.Types.Char str PrettyPrinting.parentheses1)) -}
4761d9c94ff9167b42544d314602a7bb
  parentheses1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ")"#) -}
72019942385005abb0e958683e167f18
  ppBinOp ::
    GHC.Base.String
    -> GHC.Base.String -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <L,1*U><L,1*U><L,U>,
     Unfolding: (\ op :: GHC.Base.String
                   e1 :: GHC.Base.String
                   e2 :: GHC.Base.String ->
                 GHC.CString.unpackAppendCString#
                   "("#
                   (GHC.Base.++
                      @ GHC.Types.Char
                      (GHC.Base.++
                         @ GHC.Types.Char
                         e1
                         (GHC.CString.unpackAppendCString#
                            " "#
                            (GHC.Base.++
                               @ GHC.Types.Char
                               op
                               (GHC.CString.unpackAppendCString# " "# e2))))
                      PrettyPrinting.parentheses1)) -}
4a0479160ec3e699dc0a3bd97fad089f
  ppBool :: GHC.Types.Bool -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: GHC.Types.Bool ->
                 case ds of wild {
                   GHC.Types.False -> PrettyPrinting.ppBool2
                   GHC.Types.True -> PrettyPrinting.ppBool1 }) -}
f4dc78c804e34739d9b10c95d7f60955
  ppBool1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "true"#) -}
c06ca3fddc603e96e10305442e3759ec
  ppBool2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "false"#) -}
64719090976e348a5c7873b75dee0dfe
  ppContr ::
    GHC.Types.Int
    -> Contract.Env' GHC.Types.Int -> Contract.Contr -> GHC.Base.String
  {- Arity: 3, Strictness: <L,U(U)><L,U><S,1*U> -}
fff11ac1bd4d73b29138e3ec73da3480
  ppExp ::
    GHC.Types.Int
    -> Contract.Env' GHC.Types.Int -> Contract.Exp -> GHC.Base.String
  {- Arity: 3, Strictness: <L,U(U)><L,U><S,1*U> -}
287c1627c94d6152bd9860f99fdade7e
  ppOp :: Contract.Op -> [GHC.Base.String] -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
524065cad549d970a49893a56b69e48f
  ppTExpr :: Contract.TExpr -> GHC.Base.String
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Contract.TExpr ->
                 case ds of wild {
                   Contract.Tvar v -> v
                   Contract.Tnum n -> GHC.Show.$fShowInt_$cshow n }) -}
61dffec52d80663f71b6e87d2692a8ba
  ppUnOp :: GHC.Base.String -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ op :: GHC.Base.String e :: GHC.Base.String ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                    GHC.Base.foldr @ GHC.Types.Char @ b c n op)
                   (GHC.CString.unpackAppendCString# " "# e)) -}
44659ee0e215956c52d1caec89933b42
  varName :: GHC.Types.Int -> GHC.Base.String
  {- Arity: 1, HasNoCafRefs, Strictness: <L,1*U(U)>,
     Unfolding: (\ i :: GHC.Types.Int ->
                 GHC.CString.unpackAppendCString#
                   "x"#
                   (case i of ww2 { GHC.Types.I# ww3 ->
                    case GHC.Show.$wshowSignedInt
                           0
                           ww3
                           (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                    GHC.Types.: @ GHC.Types.Char ww5 ww6 } })) -}
instance GHC.Show.Show [Contract.ObsLabel]
  = PrettyPrinting.$fShowObsLabel
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

