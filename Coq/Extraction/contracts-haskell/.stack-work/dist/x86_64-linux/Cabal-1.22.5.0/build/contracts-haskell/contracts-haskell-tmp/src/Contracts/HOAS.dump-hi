
==================== FINAL INTERFACE ====================
2018-04-08 09:58:11.632743 UTC

interface main@main:HOAS [orphan module] 7103
  interface hash: d2c7317ce931b0cba40b6ba2f7a53a55
  ABI hash: 30142d8132ad9fdb45a0c9d1ca0fdc65
  export-list hash: 30836575c2ad86bf46bf191ea76e57ac
  orphan hash: d68c19c47707de3a12fd3d87040e177c
  flag hash: 25326a5ddce171212e1ab971d94dc7ec
  sig of: Nothing
  used TH splices: False
  where
exports:
  HOAS.!
  HOAS.!&!
  HOAS.!/=!
  HOAS.!<!
  HOAS.!<=!
  HOAS.!=!
  HOAS.!>!
  HOAS.!>=!
  HOAS.!^
  HOAS.!|!
  HOAS.#
  HOAS.&
  HOAS.bNot
  HOAS.bObs
  HOAS.false
  HOAS.fromHoas
  HOAS.iff
  HOAS.rLit
  HOAS.rObs
  HOAS.toHoas
  HOAS.toVar
  HOAS.true
  HOAS.B
  HOAS.BExp
  HOAS.CDB{HOAS.CDB HOAS.unCDB}
  HOAS.Contr
  HOAS.ContrHoas{HOAS.both HOAS.fromClosed HOAS.ifWithin HOAS.ifWithinT HOAS.letc HOAS.scale HOAS.transfer HOAS.translate HOAS.translateT HOAS.zero}
  HOAS.DB{HOAS.DB HOAS.unDB}
  HOAS.Exp
  HOAS.ExpHoas
  HOAS.ExpHoas'{HOAS.acc HOAS.ife HOAS.obs HOAS.opE}
  HOAS.R
  HOAS.RExp
module dependencies: BaseTypes Contract PrettyPrinting
package dependencies: array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA
                      base-4.8.2.0* containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU
                      deepseq-1.4.1.1@deeps_6vMKxt5sPFR0XsbRWvvq59 ghc-prim-0.4.0.0
                      integer-gmp-1.0.0.0
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
         main@main:PrettyPrinting
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Functor.Identity
                         base-4.8.2.0:Data.Monoid base-4.8.2.0:Data.Type.Equality
                         base-4.8.2.0:Data.Void base-4.8.2.0:GHC.Exts
                         base-4.8.2.0:GHC.Generics
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Set.Base
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.Num 9f42750c866f5832ca565146bd660c60
import  -/  base-4.8.2.0:GHC.Real 1281efa9baf803bc7859d7efb89a38b3
import  -/  base-4.8.2.0:GHC.Show 0e1d8380a8fb0cfb07ebeda3b70cbf38
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  BaseTypes 65c5f953f1981ab087685c5da86fba76
  Asset cb66f9f4d11d7a383a10bbc8a156e568
  BoolObs dae79b8c6797ec9ef37d391a1e745c55
  Party dfcc89f4500c3c01e7f357657e35e437
  RealObs 7ca671cc5c62c89221d4c2a2ec67ae6e
import  -/  Contract a001d2d1dcba9b7dbff93220b44302c9
  exports: 03296e9aefab777c45a744199fc35678
  Acc 818351477424474cab94f88167da05c6
  Add 73efea4c084a1d9a3a6c6d9e3fd09e54
  And eddba479febe1c4e4341607c24ca439f
  BLit 227ec0371043356d3fabb57e5b39630d
  Both 37f71d6c3edba0e4c1eed54aef9f22c7
  Cond 50ca2b0b89e04ea3ceeafd81266127a2
  Contr 2b7cf2ff7abe4fab650faa1cd601f781
  Div 67c8deb0548b119b380a5d8390ef33ea
  Equal fa16c4c4ad7996bc920e78e1d3fcd23e
  Exp b1478d2a0af0ab23b8b9450d84006b6a
  If 4a71ae2a22dbdbf18925f5a7fc8a67b5
  LabB 8d7b6ec21f78a7809518abcda9224011
  LabR 7cb28ffb686b74dbb1694a608e78429e
  Leq 39f59e0946504d07702c2e53aca33898
  Less 654591f3520e180f2cf1a29d3ca5f45c
  Let 61bef3408cd960bb047fd385fb879c57
  Mult 0fbec099a8f25d1feffb35181cefdceb
  Not 2cd76820e4fa64f760b612e2befe6115
  Obs babd087d9016937058c8437afb05cd51
  ObsLabel 9eaec7e0150a3d9437c71b1eb0741d47
  Op 8b9a75298b057e373283c5fd1bb10843
  OpE 60a10ff16360d779467c0feb6834d961
  Or 2d308a983bd56f06ed2a97f86a1ee704
  RLit 9b694dd3701606adfc98afef128d1ede
  Scale 9778f7bc37aa3385d2b8c14453c0de8f
  Sub 32df2906535acb6f47a2a83750879f36
  TExpr b6d3d122a20c7bad1349187712a593b3
  Tnum 8cb2d18a1db4771f2c9b55a16d715216
  Transfer 592bd9ce494fe8e6c632f6f2a93b0d8d
  Translate cc1de4b5c2c819003fd876e653fa956f
  V1 14de470e40cd5213b0ad04cad4de2cc3
  VS cb31b4186674a401d293da759862565d
  Var 36f582ab9bdb8a4fafb1f7c30a86d949
  VarE f9f5c99ef5e7c4e9d0c01b80214c0c36
  Zero 804145a4f7c70e94267edbf29f647397
import  -/  PrettyPrinting 5ffccb64e48b3cd654647d2ec0df3241
  exports: d0fedbf2cb7709f3cb2b36b1eb2beca0
  ppContr 64719090976e348a5c7873b75dee0dfe
  ppExp fff11ac1bd4d73b29138e3ec73da3480
d9840583a6ff9b5e2d7c0e4ab767dd22
  (!) :: HOAS.ContrHoas exp contr => GHC.Types.Int -> contr -> contr
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLSLLLL),1*U(A,A,A,A,A,A,1*U,A,A,A,A)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ contr
                   @ (exp :: * -> *)
                   $dContrHoas :: HOAS.ContrHoas exp contr ->
                 HOAS.translate @ exp @ contr $dContrHoas) -}
88bea997b59b08ae272a2f9dd43e698d
  (!&!) :: HOAS.ExpHoas exp => exp HOAS.B -> exp HOAS.B -> exp HOAS.B
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LLS(LC(C(S))LL)),1*U(A,A,1*U(A,1*C1(C1(U)),A,A))><L,U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ (exp :: * -> *)
                   $dExpHoas :: HOAS.ExpHoas exp
                   eta :: exp HOAS.B
                   eta1 :: exp HOAS.B ->
                 HOAS.opE
                   @ exp
                   (HOAS.$p3ExpHoas @ exp $dExpHoas)
                   @ HOAS.B
                   @ HOAS.B
                   Contract.And
                   (GHC.Types.:
                      @ (exp HOAS.B)
                      eta
                      (GHC.Types.:
                         @ (exp HOAS.B)
                         eta1
                         (GHC.Types.[] @ (exp HOAS.B))))) -}
37965007e1d5bc601bd88a68ce018606
  (!/=!) ::
    HOAS.ExpHoas exp => exp HOAS.R -> exp HOAS.R -> exp HOAS.B
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LLS(LC(C(S))LL)),U(A,A,U(A,C(C1(U)),A,A))><L,U><L,U>,
     Unfolding: (\ @ (exp :: * -> *)
                   $dExpHoas :: HOAS.ExpHoas exp
                   x :: exp HOAS.R
                   y :: exp HOAS.R ->
                 HOAS.opE
                   @ exp
                   (HOAS.$p3ExpHoas @ exp $dExpHoas)
                   @ HOAS.B
                   @ HOAS.B
                   Contract.Not
                   (GHC.Types.:
                      @ (exp HOAS.B)
                      (HOAS.opE
                         @ exp
                         (HOAS.$p3ExpHoas @ exp $dExpHoas)
                         @ HOAS.R
                         @ HOAS.B
                         Contract.Equal
                         (GHC.Types.:
                            @ (exp HOAS.R)
                            x
                            (GHC.Types.: @ (exp HOAS.R) y (GHC.Types.[] @ (exp HOAS.R)))))
                      (GHC.Types.[] @ (exp HOAS.B)))) -}
a852fea87142a06cb5b162136adf8fe5
  (!<!) :: HOAS.ExpHoas exp => exp HOAS.R -> exp HOAS.R -> exp HOAS.B
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LLS(LC(C(S))LL)),1*U(A,A,1*U(A,1*C1(C1(U)),A,A))><L,U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ (exp :: * -> *)
                   $dExpHoas :: HOAS.ExpHoas exp
                   eta :: exp HOAS.R
                   eta1 :: exp HOAS.R ->
                 HOAS.opE
                   @ exp
                   (HOAS.$p3ExpHoas @ exp $dExpHoas)
                   @ HOAS.R
                   @ HOAS.B
                   Contract.Less
                   (GHC.Types.:
                      @ (exp HOAS.R)
                      eta
                      (GHC.Types.:
                         @ (exp HOAS.R)
                         eta1
                         (GHC.Types.[] @ (exp HOAS.R))))) -}
cdb72c1c6a861f17ae9bdf70ed0ee9aa
  (!<=!) ::
    HOAS.ExpHoas exp => exp HOAS.R -> exp HOAS.R -> exp HOAS.B
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LLS(LC(C(S))LL)),1*U(A,A,1*U(A,1*C1(C1(U)),A,A))><L,U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ (exp :: * -> *)
                   $dExpHoas :: HOAS.ExpHoas exp
                   eta :: exp HOAS.R
                   eta1 :: exp HOAS.R ->
                 HOAS.opE
                   @ exp
                   (HOAS.$p3ExpHoas @ exp $dExpHoas)
                   @ HOAS.R
                   @ HOAS.B
                   Contract.Leq
                   (GHC.Types.:
                      @ (exp HOAS.R)
                      eta
                      (GHC.Types.:
                         @ (exp HOAS.R)
                         eta1
                         (GHC.Types.[] @ (exp HOAS.R))))) -}
93b48586259f43b1115bb7e39da46999
  (!=!) :: HOAS.ExpHoas exp => exp HOAS.R -> exp HOAS.R -> exp HOAS.B
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LLS(LC(C(S))LL)),1*U(A,A,1*U(A,1*C1(C1(U)),A,A))><L,U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ (exp :: * -> *)
                   $dExpHoas :: HOAS.ExpHoas exp
                   eta :: exp HOAS.R
                   eta1 :: exp HOAS.R ->
                 HOAS.opE
                   @ exp
                   (HOAS.$p3ExpHoas @ exp $dExpHoas)
                   @ HOAS.R
                   @ HOAS.B
                   Contract.Equal
                   (GHC.Types.:
                      @ (exp HOAS.R)
                      eta
                      (GHC.Types.:
                         @ (exp HOAS.R)
                         eta1
                         (GHC.Types.[] @ (exp HOAS.R))))) -}
ac79c8ca209bb97c7c7bb543c99755a5
  (!>!) :: HOAS.ExpHoas exp => exp HOAS.R -> exp HOAS.R -> exp HOAS.B
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LLS(LC(C(S))LL)),1*U(A,A,1*U(A,1*C1(C1(U)),A,A))><L,U><L,U>,
     Unfolding: InlineRule (0, True, True) HOAS.!<! -}
cfde0927ad8a0d7968c133beb9be81b9
  (!>=!) ::
    HOAS.ExpHoas exp => exp HOAS.R -> exp HOAS.R -> exp HOAS.B
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LLS(LC(C(S))LL)),1*U(A,A,1*U(A,1*C1(C1(U)),A,A))><L,U><L,U>,
     Unfolding: InlineRule (0, True, True) HOAS.!<=! -}
bb2c0af3e0751225a55af213953b343a
  (!^) ::
    HOAS.ContrHoas exp contr => Contract.TExpr -> contr -> contr
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLSLLL),1*U(A,A,A,A,A,A,A,1*U,A,A,A)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ contr
                   @ (exp :: * -> *)
                   $dContrHoas :: HOAS.ContrHoas exp contr ->
                 HOAS.translateT @ exp @ contr $dContrHoas) -}
6120d46e453f223c26cec00d0440c665
  (!|!) :: HOAS.ExpHoas exp => exp HOAS.B -> exp HOAS.B -> exp HOAS.B
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LLS(LC(C(S))LL)),1*U(A,A,1*U(A,1*C1(C1(U)),A,A))><L,U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ (exp :: * -> *)
                   $dExpHoas :: HOAS.ExpHoas exp
                   eta :: exp HOAS.B
                   eta1 :: exp HOAS.B ->
                 HOAS.opE
                   @ exp
                   (HOAS.$p3ExpHoas @ exp $dExpHoas)
                   @ HOAS.B
                   @ HOAS.B
                   Contract.Or
                   (GHC.Types.:
                      @ (exp HOAS.B)
                      eta
                      (GHC.Types.:
                         @ (exp HOAS.B)
                         eta1
                         (GHC.Types.[] @ (exp HOAS.B))))) -}
3c9ad694a72b4837af3e4a766a2be99c
  (#) :: HOAS.ContrHoas exp contr => exp HOAS.R -> contr -> contr
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLSLLLLLLL),U(A,A,A,U,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (0, True, True) HOAS.scale -}
70b39d36af0ed9c7fc3ff750be42ca48
  $fContrHoasDBCDB :: HOAS.ContrHoas HOAS.DB HOAS.CDB
  DFunId[0]
  {- Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ HOAS.DB
                  @ HOAS.CDB
                  HOAS.$fExpHoasDB
                  HOAS.$fContrHoasDBCDB_$czero
                  HOAS.$fContrHoasDBCDB_$cletc
                  HOAS.$fContrHoasDBCDB_$cscale
                  HOAS.$fContrHoasDBCDB_$cboth
                  HOAS.$fContrHoasDBCDB_$ctransfer
                  HOAS.$fContrHoasDBCDB_$ctranslate
                  HOAS.$fContrHoasDBCDB_$ctranslateT
                  HOAS.$fContrHoasDBCDB_$cifWithin
                  HOAS.$fContrHoasDBCDB_$cifWithinT
                  HOAS.$fContrHoasDBCDB_$cfromClosed -}
c311cb485a365b0bda95a9e75a2ce566
  $fContrHoasDBCDB1 ::
    HOAS.DB HOAS.B
    -> Contract.TExpr
    -> HOAS.CDB
    -> HOAS.CDB
    -> GHC.Types.Int
    -> Contract.Contr
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*C1(U)><L,U><L,1*C1(U)><L,1*C1(U)><L,U>m7,
     Unfolding: InlineRule (5, True, False)
                (\ e :: HOAS.DB HOAS.B
                   t :: Contract.TExpr
                   c1 :: HOAS.CDB
                   c2 :: HOAS.CDB
                   i :: GHC.Types.Int ->
                 Contract.If
                   (e `cast` (HOAS.NTCo:DB[0] <HOAS.B>_P) i)
                   t
                   (c1 `cast` (HOAS.NTCo:CDB[0]) i)
                   (c2 `cast` (HOAS.NTCo:CDB[0]) i)) -}
77bb916ddc436913827d9cea2b6ab60f
  $fContrHoasDBCDB2 ::
    HOAS.DB HOAS.B
    -> GHC.Types.Int
    -> HOAS.CDB
    -> HOAS.CDB
    -> GHC.Types.Int
    -> Contract.Contr
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*C1(U)><L,U><L,1*C1(U)><L,1*C1(U)><L,U>m7,
     Unfolding: InlineRule (5, True, False)
                (\ e :: HOAS.DB HOAS.B
                   t :: GHC.Types.Int
                   c1 :: HOAS.CDB
                   c2 :: HOAS.CDB
                   i :: GHC.Types.Int ->
                 Contract.If
                   (e `cast` (HOAS.NTCo:DB[0] <HOAS.B>_P) i)
                   (Contract.Tnum t)
                   (c1 `cast` (HOAS.NTCo:CDB[0]) i)
                   (c2 `cast` (HOAS.NTCo:CDB[0]) i)) -}
453efd7eb9c7ccfabfd4b47d4a2e1831
  $fContrHoasDBCDB3 ::
    Contract.TExpr -> HOAS.CDB -> GHC.Types.Int -> Contract.Contr
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,1*C1(U)><L,U>m5,
     Unfolding: InlineRule (3, True, False)
                (\ t :: Contract.TExpr c :: HOAS.CDB i :: GHC.Types.Int ->
                 Contract.Translate t (c `cast` (HOAS.NTCo:CDB[0]) i)) -}
eff90b9057ef34c87bfcdf3c011797ce
  $fContrHoasDBCDB4 ::
    GHC.Types.Int -> HOAS.CDB -> GHC.Types.Int -> Contract.Contr
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,1*C1(U)><L,U>m5,
     Unfolding: InlineRule (3, True, False)
                (\ t :: GHC.Types.Int c :: HOAS.CDB i :: GHC.Types.Int ->
                 Contract.Translate
                   (Contract.Tnum t)
                   (c `cast` (HOAS.NTCo:CDB[0]) i)) -}
01982864a94dfe4ca233fc3d84c9aa43
  $fContrHoasDBCDB5 ::
    BaseTypes.Party
    -> BaseTypes.Party
    -> BaseTypes.Asset
    -> GHC.Types.Int
    -> Contract.Contr
  {- Arity: 4, HasNoCafRefs, Strictness: <L,U><L,U><L,U><L,A>m3,
     Unfolding: InlineRule (4, True, True)
                (\ p1 :: BaseTypes.Party
                   p2 :: BaseTypes.Party
                   a7 :: BaseTypes.Asset
                   ds :: GHC.Types.Int ->
                 Contract.Transfer p1 p2 a7) -}
e684c0501a375387199336c2a67646e6
  $fContrHoasDBCDB6 ::
    HOAS.CDB -> HOAS.CDB -> GHC.Types.Int -> Contract.Contr
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(U)><L,1*C1(U)><L,U>m6,
     Unfolding: InlineRule (3, True, False)
                (\ c1 :: HOAS.CDB c2 :: HOAS.CDB i :: GHC.Types.Int ->
                 Contract.Both
                   (c1 `cast` (HOAS.NTCo:CDB[0]) i)
                   (c2 `cast` (HOAS.NTCo:CDB[0]) i)) -}
ae2f126ec8b5570aa353ca52e1e4661f
  $fContrHoasDBCDB7 ::
    HOAS.DB HOAS.R -> HOAS.CDB -> GHC.Types.Int -> Contract.Contr
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(U)><L,1*C1(U)><L,U>m4,
     Unfolding: InlineRule (3, True, False)
                (\ e :: HOAS.DB HOAS.R c :: HOAS.CDB i :: GHC.Types.Int ->
                 Contract.Scale
                   (e `cast` (HOAS.NTCo:DB[0] <HOAS.R>_P) i)
                   (c `cast` (HOAS.NTCo:CDB[0]) i)) -}
d8a879d2f5cad3876e8ffd22371d4d5b
  $fContrHoasDBCDB8 ::
    HOAS.DB t
    -> (HOAS.DB t -> HOAS.CDB) -> GHC.Types.Int -> Contract.Contr
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(U)><L,1*C1(C1(U))><L,U(U)>m2,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ t
                   w :: HOAS.DB t
                   w1 :: HOAS.DB t -> HOAS.CDB
                   w2 :: GHC.Types.Int ->
                 Contract.Let
                   (w `cast` (HOAS.NTCo:DB[0] <t>_P) w2)
                   (let {
                      lvl :: GHC.Types.Int
                      = case w2 of wild { GHC.Types.I# x ->
                        GHC.Types.I# (GHC.Prim.+# x 1) }
                    } in
                    (w1
                       (\ j :: GHC.Types.Int ->
                        Contract.VarE
                          (case j of wild { GHC.Types.I# x ->
                           case lvl of wild1 { GHC.Types.I# y ->
                           HOAS.$wtoVar (GHC.Prim.-# x y) } }))
                         `cast`
                       (Sym (HOAS.NTCo:DB[0] <t>_P)))
                      `cast`
                    (HOAS.NTCo:CDB[0])
                      (case w2 of wild { GHC.Types.I# x ->
                       GHC.Types.I# (GHC.Prim.+# x 1) }))) -}
3e3353f7069117d235edf8f88c9e2707
  $fContrHoasDBCDB9 :: GHC.Types.Int -> Contract.Contr
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ds :: GHC.Types.Int -> Contract.Zero) -}
cb1ea50e3580241a32b7392b8bd61017
  $fContrHoasDBCDB_$cboth :: HOAS.CDB -> HOAS.CDB -> HOAS.CDB
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(U)><L,1*C1(U)><L,U>m6,
     Unfolding: InlineRule (0, True, True)
                HOAS.$fContrHoasDBCDB6
                  `cast`
                (<HOAS.CDB>_R ->_R <HOAS.CDB>_R ->_R Sym (HOAS.NTCo:CDB[0])) -}
e1ca2cad4e8c0bdab0859cc02e05178b
  $fContrHoasDBCDB_$cfromClosed :: Contract.Contr -> HOAS.CDB
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,A>,
     Unfolding: InlineRule (0, True, True)
                (GHC.Base.const @ Contract.Contr @ GHC.Types.Int)
                  `cast`
                (<Contract.Contr>_R ->_R Sym (HOAS.NTCo:CDB[0])) -}
9eac556b3b4fcffa79d4ef8393472c3d
  $fContrHoasDBCDB_$cifWithin ::
    HOAS.DB HOAS.B -> GHC.Types.Int -> HOAS.CDB -> HOAS.CDB -> HOAS.CDB
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*C1(U)><L,U><L,1*C1(U)><L,1*C1(U)><L,U>m7,
     Unfolding: InlineRule (0, True, True)
                HOAS.$fContrHoasDBCDB2
                  `cast`
                (<HOAS.DB HOAS.B>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R <HOAS.CDB>_R
                 ->_R <HOAS.CDB>_R
                 ->_R Sym (HOAS.NTCo:CDB[0])) -}
0bc0735cfab5d87c0c8c4715ecbc12c2
  $fContrHoasDBCDB_$cifWithinT ::
    HOAS.DB HOAS.B
    -> Contract.TExpr -> HOAS.CDB -> HOAS.CDB -> HOAS.CDB
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*C1(U)><L,U><L,1*C1(U)><L,1*C1(U)><L,U>m7,
     Unfolding: InlineRule (0, True, True)
                HOAS.$fContrHoasDBCDB1
                  `cast`
                (<HOAS.DB HOAS.B>_R
                 ->_R <Contract.TExpr>_R
                 ->_R <HOAS.CDB>_R
                 ->_R <HOAS.CDB>_R
                 ->_R Sym (HOAS.NTCo:CDB[0])) -}
3d399b8c50e8e0faca0e4d1c82d25e3c
  $fContrHoasDBCDB_$cletc ::
    HOAS.DB t -> (HOAS.DB t -> HOAS.CDB) -> HOAS.CDB
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(U)><L,1*C1(C1(U))><L,U(U)>m2,
     Unfolding: InlineRule (0, True, True)
                HOAS.$fContrHoasDBCDB8
                  `cast`
                (forall t.
                 <HOAS.DB t>_R
                 ->_R <HOAS.DB t -> HOAS.CDB>_R
                 ->_R Sym (HOAS.NTCo:CDB[0])) -}
797cbcea65f85bd2b28a59c1f808613c
  $fContrHoasDBCDB_$cscale :: HOAS.DB HOAS.R -> HOAS.CDB -> HOAS.CDB
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(U)><L,1*C1(U)><L,U>m4,
     Unfolding: InlineRule (0, True, True)
                HOAS.$fContrHoasDBCDB7
                  `cast`
                (<HOAS.DB HOAS.R>_R
                 ->_R <HOAS.CDB>_R
                 ->_R Sym (HOAS.NTCo:CDB[0])) -}
a26ff7ae8a5965b30e3ed8b0b93b7139
  $fContrHoasDBCDB_$ctransfer ::
    BaseTypes.Party -> BaseTypes.Party -> BaseTypes.Asset -> HOAS.CDB
  {- Arity: 4, HasNoCafRefs, Strictness: <L,U><L,U><L,U><L,A>m3,
     Unfolding: InlineRule (0, True, True)
                HOAS.$fContrHoasDBCDB5
                  `cast`
                (<BaseTypes.Party>_R
                 ->_R <BaseTypes.Party>_R
                 ->_R <BaseTypes.Asset>_R
                 ->_R Sym (HOAS.NTCo:CDB[0])) -}
43ef0cb0cd03e9714d3dd4c3df1fa00a
  $fContrHoasDBCDB_$ctranslate ::
    GHC.Types.Int -> HOAS.CDB -> HOAS.CDB
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,1*C1(U)><L,U>m5,
     Unfolding: InlineRule (0, True, True)
                HOAS.$fContrHoasDBCDB4
                  `cast`
                (<GHC.Types.Int>_R
                 ->_R <HOAS.CDB>_R
                 ->_R Sym (HOAS.NTCo:CDB[0])) -}
d3f7e831723edf9f6a6b3ca330e85494
  $fContrHoasDBCDB_$ctranslateT ::
    Contract.TExpr -> HOAS.CDB -> HOAS.CDB
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,1*C1(U)><L,U>m5,
     Unfolding: InlineRule (0, True, True)
                HOAS.$fContrHoasDBCDB3
                  `cast`
                (<Contract.TExpr>_R
                 ->_R <HOAS.CDB>_R
                 ->_R Sym (HOAS.NTCo:CDB[0])) -}
76477f2d16ffe5ac27526ebb0609347f
  $fContrHoasDBCDB_$czero :: HOAS.CDB
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                HOAS.$fContrHoasDBCDB9 `cast` (Sym (HOAS.NTCo:CDB[0])) -}
8320adb176cf97a481636bd32842b5fe
  $fExpHoas'DB :: HOAS.ExpHoas' HOAS.DB
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ HOAS.DB
                  HOAS.$fExpHoas'DB_$cife
                  HOAS.$fExpHoas'DB_$copE
                  HOAS.$fExpHoas'DB_$cobs
                  HOAS.$fExpHoas'DB_$cacc -}
0393b29a0d34d7c17d1c18e50b95c734
  $fExpHoas'DB1 ::
    (HOAS.DB t -> HOAS.DB t)
    -> GHC.Types.Int -> HOAS.DB t -> GHC.Types.Int -> Contract.Exp
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><L,U><L,1*C1(U)><L,U(U)>m4,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ @ t
                   w :: HOAS.DB t -> HOAS.DB t
                   w1 :: GHC.Types.Int
                   w2 :: HOAS.DB t
                   w3 :: GHC.Types.Int ->
                 Contract.Acc
                   (let {
                      lvl :: GHC.Types.Int
                      = case w3 of wild { GHC.Types.I# x ->
                        GHC.Types.I# (GHC.Prim.+# x 1) }
                    } in
                    (w (\ j :: GHC.Types.Int ->
                        Contract.VarE
                          (case j of wild { GHC.Types.I# x ->
                           case lvl of wild1 { GHC.Types.I# y ->
                           HOAS.$wtoVar (GHC.Prim.-# x y) } }))
                         `cast`
                       (Sym (HOAS.NTCo:DB[0] <t>_P)))
                      `cast`
                    (HOAS.NTCo:DB[0] <t>_P)
                      (case w3 of wild { GHC.Types.I# x ->
                       GHC.Types.I# (GHC.Prim.+# x 1) }))
                   w1
                   (w2 `cast` (HOAS.NTCo:DB[0] <t>_P) w3)) -}
519b283d0a7fee19b848b0cbfe08e5ad
  $fExpHoas'DB2 ::
    Contract.ObsLabel -> GHC.Types.Int -> GHC.Types.Int -> Contract.Exp
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,U><L,A>m2,
     Unfolding: InlineRule (3, True, True)
                (\ @ t
                   l :: Contract.ObsLabel
                   t1 :: GHC.Types.Int
                   ds :: GHC.Types.Int ->
                 Contract.Obs l t1) -}
500c4f7bbcbba6f459790ea6edcd1657
  $fExpHoas'DB3 ::
    Contract.Op -> [HOAS.DB t'] -> GHC.Types.Int -> Contract.Exp
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,1*U><L,U>m1,
     Unfolding: InlineRule (3, True, False)
                (\ @ t'
                   @ t
                   op2 :: Contract.Op
                   args :: [HOAS.DB t']
                   i :: GHC.Types.Int ->
                 Contract.OpE
                   op2
                   (GHC.Base.build
                      @ Contract.Exp
                      (\ @ b1 c :: Contract.Exp -> b1 -> b1[OneShot] n :: b1[OneShot] ->
                       GHC.Base.foldr
                         @ (HOAS.DB t')
                         @ b1
                         (GHC.Base.mapFB
                            @ Contract.Exp
                            @ b1
                            @ (HOAS.DB t')
                            c
                            (\ x :: HOAS.DB t' -> x `cast` (HOAS.NTCo:DB[0] <t'>_P) i))
                         n
                         args))) -}
75f458eea3edd39bad0cb667bac3c92a
  $fExpHoas'DB4 ::
    HOAS.DB HOAS.B
    -> HOAS.DB t -> HOAS.DB t -> GHC.Types.Int -> Contract.Exp
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*C1(U)><L,1*C1(U)><L,1*C1(U)><L,U>m1,
     Unfolding: InlineRule (4, True, False)
                (\ @ t
                   b :: HOAS.DB HOAS.B
                   e1 :: HOAS.DB t
                   e2 :: HOAS.DB t
                   i :: GHC.Types.Int ->
                 Contract.OpE
                   Contract.Cond
                   (GHC.Types.:
                      @ Contract.Exp
                      (b `cast` (HOAS.NTCo:DB[0] <HOAS.B>_P) i)
                      (GHC.Types.:
                         @ Contract.Exp
                         (e1 `cast` (HOAS.NTCo:DB[0] <t>_P) i)
                         (GHC.Types.:
                            @ Contract.Exp
                            (e2 `cast` (HOAS.NTCo:DB[0] <t>_P) i)
                            (GHC.Types.[] @ Contract.Exp))))) -}
26d1bfa48600acd6a11386bcde5298b9
  $fExpHoas'DB_$cacc ::
    (HOAS.DB t -> HOAS.DB t) -> GHC.Types.Int -> HOAS.DB t -> HOAS.DB t
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><L,U><L,1*C1(U)><L,U(U)>m4,
     Unfolding: InlineRule (0, True, True)
                HOAS.$fExpHoas'DB1
                  `cast`
                (forall t.
                 <HOAS.DB t -> HOAS.DB t>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R <HOAS.DB t>_R
                 ->_R Sym (HOAS.NTCo:DB[0] <t>_P)) -}
aa308269bf3c1a93ab9132eb23e38ed5
  $fExpHoas'DB_$cife ::
    HOAS.DB HOAS.B -> HOAS.DB t -> HOAS.DB t -> HOAS.DB t
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*C1(U)><L,1*C1(U)><L,1*C1(U)><L,U>m1,
     Unfolding: InlineRule (0, True, True)
                HOAS.$fExpHoas'DB4
                  `cast`
                (forall t.
                 <HOAS.DB HOAS.B>_R
                 ->_R <HOAS.DB t>_R
                 ->_R <HOAS.DB t>_R
                 ->_R Sym (HOAS.NTCo:DB[0] <t>_P)) -}
13a77051e779fcb9603706af42f1c1e8
  $fExpHoas'DB_$cobs ::
    Contract.ObsLabel -> GHC.Types.Int -> HOAS.DB t
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,U><L,A>m2,
     Unfolding: InlineRule (0, True, True)
                HOAS.$fExpHoas'DB2
                  `cast`
                (forall t.
                 <Contract.ObsLabel>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (HOAS.NTCo:DB[0] <t>_P)) -}
3502ffbfcdaf5456b099a436347aaf5f
  $fExpHoas'DB_$copE :: Contract.Op -> [HOAS.DB t'] -> HOAS.DB t
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,1*U><L,U>m1,
     Unfolding: InlineRule (0, True, True)
                HOAS.$fExpHoas'DB3
                  `cast`
                (forall t' t.
                 <Contract.Op>_R
                 ->_R <[HOAS.DB t']>_R
                 ->_R Sym (HOAS.NTCo:DB[0] <t>_P)) -}
8681f28c922d9f67b0f5084de64fbc99
  $fExpHoasDB :: HOAS.ExpHoas HOAS.DB
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ HOAS.DB HOAS.$fNumDB HOAS.$fFractionalDB HOAS.$fExpHoas'DB -}
1d2beb1d1f4092a3b1ea7699cd17ff02
  $fFractionalDB :: GHC.Real.Fractional (HOAS.DB HOAS.R)
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (HOAS.DB HOAS.R)
                  HOAS.$fNumDB
                  HOAS.$fFractionalDB_$c/
                  HOAS.$fFractionalDB_$crecip
                  HOAS.$fFractionalDB_$cfromRational -}
1d2beb1d1f4092a3b1ea7699cd17ff02
  $fFractionalDB1 ::
    GHC.Real.Rational -> GHC.Types.Int -> Contract.Exp
  {- Arity: 1, Strictness: <L,1*U(U,U)>,
     Unfolding: (\ r :: GHC.Real.Rational ->
                 let {
                   a7 :: GHC.Types.Double
                   = case r of wild { GHC.Real.:% n d ->
                     GHC.Float.rationalToDouble n d }
                 } in
                 let {
                   op2 :: Contract.Op = Contract.RLit a7
                 } in
                 \ i :: GHC.Types.Int ->
                 Contract.OpE
                   op2
                   (GHC.Base.map
                      @ (HOAS.DB GHC.Prim.Any)
                      @ Contract.Exp
                      (\ x :: HOAS.DB GHC.Prim.Any ->
                       x `cast` (HOAS.NTCo:DB[0] <GHC.Prim.Any>_P) i)
                      (GHC.Types.[] @ (HOAS.DB GHC.Prim.Any)))) -}
1d2beb1d1f4092a3b1ea7699cd17ff02
  $fFractionalDB2 ::
    GHC.Integer.Type.Integer -> GHC.Types.Int -> Contract.Exp
  {- Arity: 1, HasNoCafRefs, Strictness: <L,1*U>,
     Unfolding: (\ i :: GHC.Integer.Type.Integer ->
                 let {
                   a7 :: GHC.Types.Double
                   = case GHC.Integer.Type.doubleFromInteger i of wild { DEFAULT ->
                     GHC.Types.D# wild }
                 } in
                 let {
                   op2 :: Contract.Op = Contract.RLit a7
                 } in
                 \ i1 :: GHC.Types.Int ->
                 Contract.OpE
                   op2
                   (GHC.Base.map
                      @ (HOAS.DB GHC.Prim.Any)
                      @ Contract.Exp
                      (\ x :: HOAS.DB GHC.Prim.Any ->
                       x `cast` (HOAS.NTCo:DB[0] <GHC.Prim.Any>_P) i1)
                      (GHC.Types.[] @ (HOAS.DB GHC.Prim.Any)))) -}
1d2beb1d1f4092a3b1ea7699cd17ff02
  $fFractionalDB3 ::
    HOAS.DB HOAS.R -> HOAS.DB HOAS.R -> GHC.Types.Int -> Contract.Exp
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,U><L,U>m1,
     Unfolding: InlineRule (3, True, False)
                (\ x :: HOAS.DB HOAS.R y :: HOAS.DB HOAS.R eta :: GHC.Types.Int ->
                 Contract.OpE
                   Contract.Div
                   (GHC.Base.build
                      @ Contract.Exp
                      (\ @ b1 c :: Contract.Exp -> b1 -> b1[OneShot] n :: b1[OneShot] ->
                       GHC.Base.foldr
                         @ (HOAS.DB HOAS.R)
                         @ b1
                         (GHC.Base.mapFB
                            @ Contract.Exp
                            @ b1
                            @ (HOAS.DB HOAS.R)
                            c
                            (\ x1 :: HOAS.DB HOAS.R ->
                             x1 `cast` (HOAS.NTCo:DB[0] <HOAS.R>_P) eta))
                         n
                         (GHC.Types.:
                            @ (HOAS.DB HOAS.R)
                            x
                            (GHC.Types.:
                               @ (HOAS.DB HOAS.R)
                               y
                               (GHC.Types.[] @ (HOAS.DB HOAS.R))))))) -}
1d2beb1d1f4092a3b1ea7699cd17ff02
  $fFractionalDB_$c/ ::
    HOAS.DB HOAS.R -> HOAS.DB HOAS.R -> HOAS.DB HOAS.R
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,U><L,U>m1,
     Unfolding: InlineRule (0, True, True)
                HOAS.$fFractionalDB3
                  `cast`
                (<HOAS.DB HOAS.R>_R
                 ->_R <HOAS.DB HOAS.R>_R
                 ->_R Sym (HOAS.NTCo:DB[0] <HOAS.R>_P)) -}
1d2beb1d1f4092a3b1ea7699cd17ff02
  $fFractionalDB_$cfromInteger ::
    GHC.Integer.Type.Integer -> HOAS.DB HOAS.R
  {- Arity: 1, HasNoCafRefs, Strictness: <L,1*U>,
     Unfolding: InlineRule (0, True, True)
                HOAS.$fFractionalDB2
                  `cast`
                (<GHC.Integer.Type.Integer>_R
                 ->_R Sym (HOAS.NTCo:DB[0] <HOAS.R>_P)) -}
1d2beb1d1f4092a3b1ea7699cd17ff02
  $fFractionalDB_$cfromRational ::
    GHC.Real.Rational -> HOAS.DB HOAS.R
  {- Arity: 1, Strictness: <L,1*U(U,U)>,
     Unfolding: InlineRule (0, True, True)
                HOAS.$fFractionalDB1
                  `cast`
                (<GHC.Real.Rational>_R ->_R Sym (HOAS.NTCo:DB[0] <HOAS.R>_P)) -}
1d2beb1d1f4092a3b1ea7699cd17ff02
  $fFractionalDB_$crecip :: HOAS.DB HOAS.R -> HOAS.DB HOAS.R
  {- Arity: 1, Strictness: <L,U>, Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ eta :: HOAS.DB HOAS.R ->
                 HOAS.$fFractionalDB_$c/
                   (HOAS.$fFractionalDB_$cfromInteger __integer 1)
                   eta) -}
1d2beb1d1f4092a3b1ea7699cd17ff02
  $fNumDB :: GHC.Num.Num (HOAS.DB HOAS.R)
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (HOAS.DB HOAS.R)
                  HOAS.$fNumDB_$c+
                  HOAS.$fNumDB_$c-
                  HOAS.$fNumDB_$c*
                  HOAS.$fNumDB_$cnegate
                  HOAS.$fNumDB_$cabs
                  HOAS.$fNumDB_$csignum
                  HOAS.$fFractionalDB_$cfromInteger -}
1d2beb1d1f4092a3b1ea7699cd17ff02
  $fNumDB1 :: HOAS.DB HOAS.R -> GHC.Types.Int -> Contract.Exp
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>m1,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: HOAS.DB HOAS.R w1 :: GHC.Types.Int ->
                 case HOAS.$wa w w1 of ww { (#,#) ww1 ww2 ->
                 Contract.OpE ww1 ww2 }) -}
e35fa542c4187ab86dabf2eb9dea0420
  $fNumDB10 :: GHC.Types.Int -> Contract.Exp
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m1,
     Unfolding: InlineRule (1, True, False)
                (\ i :: GHC.Types.Int ->
                 Contract.OpE
                   HOAS.$fNumDB_op
                   (GHC.Base.build
                      @ Contract.Exp
                      (\ @ b1 c :: Contract.Exp -> b1 -> b1[OneShot] n :: b1[OneShot] ->
                       n))) -}
1d2beb1d1f4092a3b1ea7699cd17ff02
  $fNumDB11 :: [HOAS.DB HOAS.R]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ (HOAS.DB HOAS.R)
                   HOAS.$fNumDB12 `cast` (Sym (HOAS.NTCo:DB[0] <HOAS.R>_P))
                   (GHC.Types.[] @ (HOAS.DB HOAS.R))) -}
121ee3a0d273b706cc6c0bf24f4ed27f
  $fNumDB12 :: GHC.Types.Int -> Contract.Exp
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>m1,
     Unfolding: InlineRule (1, True, False)
                (\ i :: GHC.Types.Int ->
                 Contract.OpE HOAS.$fNumDB_op (GHC.Types.[] @ Contract.Exp)) -}
1d2beb1d1f4092a3b1ea7699cd17ff02
  $fNumDB13 :: HOAS.DB HOAS.R -> GHC.Types.Int -> Contract.Exp
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>m1,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: HOAS.DB HOAS.R w1 :: GHC.Types.Int ->
                 case HOAS.$wa1 w w1 of ww { (#,#) ww1 ww2 ->
                 Contract.OpE ww1 ww2 }) -}
1d2beb1d1f4092a3b1ea7699cd17ff02
  $fNumDB14 :: GHC.Types.Int -> Contract.Exp
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ i :: GHC.Types.Int ->
                 Contract.OpE
                   HOAS.$fNumDB_op
                   (GHC.Base.map
                      @ (HOAS.DB GHC.Prim.Any)
                      @ Contract.Exp
                      (\ x :: HOAS.DB GHC.Prim.Any ->
                       x `cast` (HOAS.NTCo:DB[0] <GHC.Prim.Any>_P) i)
                      (GHC.Types.[] @ (HOAS.DB GHC.Prim.Any)))) -}
1d2beb1d1f4092a3b1ea7699cd17ff02
  $fNumDB15 ::
    HOAS.DB HOAS.R -> HOAS.DB HOAS.R -> GHC.Types.Int -> Contract.Exp
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,U><L,U>m1,
     Unfolding: InlineRule (3, True, False)
                (\ x :: HOAS.DB HOAS.R y :: HOAS.DB HOAS.R eta :: GHC.Types.Int ->
                 Contract.OpE
                   Contract.Sub
                   (GHC.Base.build
                      @ Contract.Exp
                      (\ @ b1 c :: Contract.Exp -> b1 -> b1[OneShot] n :: b1[OneShot] ->
                       GHC.Base.foldr
                         @ (HOAS.DB HOAS.R)
                         @ b1
                         (GHC.Base.mapFB
                            @ Contract.Exp
                            @ b1
                            @ (HOAS.DB HOAS.R)
                            c
                            (\ x1 :: HOAS.DB HOAS.R ->
                             x1 `cast` (HOAS.NTCo:DB[0] <HOAS.R>_P) eta))
                         n
                         (GHC.Types.:
                            @ (HOAS.DB HOAS.R)
                            x
                            (GHC.Types.:
                               @ (HOAS.DB HOAS.R)
                               y
                               (GHC.Types.[] @ (HOAS.DB HOAS.R))))))) -}
1d2beb1d1f4092a3b1ea7699cd17ff02
  $fNumDB16 ::
    HOAS.DB HOAS.R -> HOAS.DB HOAS.R -> GHC.Types.Int -> Contract.Exp
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,U><L,U>m1,
     Unfolding: InlineRule (3, True, False)
                (\ x :: HOAS.DB HOAS.R y :: HOAS.DB HOAS.R eta :: GHC.Types.Int ->
                 Contract.OpE
                   Contract.Mult
                   (GHC.Base.build
                      @ Contract.Exp
                      (\ @ b1 c :: Contract.Exp -> b1 -> b1[OneShot] n :: b1[OneShot] ->
                       GHC.Base.foldr
                         @ (HOAS.DB HOAS.R)
                         @ b1
                         (GHC.Base.mapFB
                            @ Contract.Exp
                            @ b1
                            @ (HOAS.DB HOAS.R)
                            c
                            (\ x1 :: HOAS.DB HOAS.R ->
                             x1 `cast` (HOAS.NTCo:DB[0] <HOAS.R>_P) eta))
                         n
                         (GHC.Types.:
                            @ (HOAS.DB HOAS.R)
                            x
                            (GHC.Types.:
                               @ (HOAS.DB HOAS.R)
                               y
                               (GHC.Types.[] @ (HOAS.DB HOAS.R))))))) -}
1d2beb1d1f4092a3b1ea7699cd17ff02
  $fNumDB17 ::
    HOAS.DB HOAS.R -> HOAS.DB HOAS.R -> GHC.Types.Int -> Contract.Exp
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,U><L,U>m1,
     Unfolding: InlineRule (3, True, False)
                (\ x :: HOAS.DB HOAS.R y :: HOAS.DB HOAS.R eta :: GHC.Types.Int ->
                 Contract.OpE
                   Contract.Add
                   (GHC.Base.build
                      @ Contract.Exp
                      (\ @ b1 c :: Contract.Exp -> b1 -> b1[OneShot] n :: b1[OneShot] ->
                       GHC.Base.foldr
                         @ (HOAS.DB HOAS.R)
                         @ b1
                         (GHC.Base.mapFB
                            @ Contract.Exp
                            @ b1
                            @ (HOAS.DB HOAS.R)
                            c
                            (\ x1 :: HOAS.DB HOAS.R ->
                             x1 `cast` (HOAS.NTCo:DB[0] <HOAS.R>_P) eta))
                         n
                         (GHC.Types.:
                            @ (HOAS.DB HOAS.R)
                            x
                            (GHC.Types.:
                               @ (HOAS.DB HOAS.R)
                               y
                               (GHC.Types.[] @ (HOAS.DB HOAS.R))))))) -}
f1ada5ccd2c21364d822964216697476
  $fNumDB2 :: [Contract.Exp]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Contract.Exp
                   HOAS.$fNumDB6
                   HOAS.$fNumDB3) -}
efa0101beaed36cf5d120c6b83cb474e
  $fNumDB3 :: [Contract.Exp]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Contract.Exp
                   HOAS.$fNumDB4
                   (GHC.Types.[] @ Contract.Exp)) -}
35441343724cc4b13771e5f10027682c
  $fNumDB4 :: Contract.Exp
  {- HasNoCafRefs,
     Unfolding: (Contract.OpE
                   HOAS.$fNumDB_op
                   (GHC.Types.[] @ Contract.Exp)) -}
7f8afb8a1f50dc84e96561f8f8a2e051
  $fNumDB5 :: GHC.Types.Double
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.D# 0.0) -}
4ae975ca33caeece30eec036203572ce
  $fNumDB6 :: Contract.Exp
  {- HasNoCafRefs,
     Unfolding: (Contract.OpE
                   HOAS.$fNumDB_op1
                   (GHC.Types.[] @ Contract.Exp)) -}
77a04fbedafb83ef95b2880836a99b00
  $fNumDB7 :: GHC.Types.Double
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.D# 1.0) -}
1d2beb1d1f4092a3b1ea7699cd17ff02
  $fNumDB8 :: [HOAS.DB HOAS.R]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (HOAS.DB HOAS.R)
                   HOAS.$fNumDB9 `cast` (Sym (HOAS.NTCo:DB[0] <HOAS.R>_P))
                   (GHC.Types.[] @ (HOAS.DB HOAS.R))) -}
6baaba367a2de5b0023af310fcb00ac3
  $fNumDB9 :: GHC.Types.Int -> Contract.Exp
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m1,
     Unfolding: InlineRule (1, True, False)
                (\ i :: GHC.Types.Int ->
                 Contract.OpE
                   HOAS.$fNumDB_op1
                   (GHC.Base.build
                      @ Contract.Exp
                      (\ @ b1 c :: Contract.Exp -> b1 -> b1[OneShot] n :: b1[OneShot] ->
                       n))) -}
1d2beb1d1f4092a3b1ea7699cd17ff02
  $fNumDB_$c* :: HOAS.DB HOAS.R -> HOAS.DB HOAS.R -> HOAS.DB HOAS.R
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,U><L,U>m1,
     Unfolding: InlineRule (0, True, True)
                HOAS.$fNumDB16
                  `cast`
                (<HOAS.DB HOAS.R>_R
                 ->_R <HOAS.DB HOAS.R>_R
                 ->_R Sym (HOAS.NTCo:DB[0] <HOAS.R>_P)) -}
1d2beb1d1f4092a3b1ea7699cd17ff02
  $fNumDB_$c+ :: HOAS.DB HOAS.R -> HOAS.DB HOAS.R -> HOAS.DB HOAS.R
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,U><L,U>m1,
     Unfolding: InlineRule (0, True, True)
                HOAS.$fNumDB17
                  `cast`
                (<HOAS.DB HOAS.R>_R
                 ->_R <HOAS.DB HOAS.R>_R
                 ->_R Sym (HOAS.NTCo:DB[0] <HOAS.R>_P)) -}
1d2beb1d1f4092a3b1ea7699cd17ff02
  $fNumDB_$c- :: HOAS.DB HOAS.R -> HOAS.DB HOAS.R -> HOAS.DB HOAS.R
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,U><L,U>m1,
     Unfolding: InlineRule (0, True, True)
                HOAS.$fNumDB15
                  `cast`
                (<HOAS.DB HOAS.R>_R
                 ->_R <HOAS.DB HOAS.R>_R
                 ->_R Sym (HOAS.NTCo:DB[0] <HOAS.R>_P)) -}
1d2beb1d1f4092a3b1ea7699cd17ff02
  $fNumDB_$cabs :: HOAS.DB HOAS.R -> HOAS.DB HOAS.R
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>m1,
     Unfolding: InlineRule (0, True, True)
                HOAS.$fNumDB13
                  `cast`
                (<HOAS.DB HOAS.R>_R ->_R Sym (HOAS.NTCo:DB[0] <HOAS.R>_P)) -}
1d2beb1d1f4092a3b1ea7699cd17ff02
  $fNumDB_$cnegate :: HOAS.DB HOAS.R -> HOAS.DB HOAS.R
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ x :: HOAS.DB HOAS.R ->
                 HOAS.$fNumDB_$c-
                   (HOAS.$fFractionalDB_$cfromInteger __integer 0)
                   x) -}
1d2beb1d1f4092a3b1ea7699cd17ff02
  $fNumDB_$csignum :: HOAS.DB HOAS.R -> HOAS.DB HOAS.R
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>m1,
     Unfolding: InlineRule (0, True, True)
                HOAS.$fNumDB1
                  `cast`
                (<HOAS.DB HOAS.R>_R ->_R Sym (HOAS.NTCo:DB[0] <HOAS.R>_P)) -}
1d2beb1d1f4092a3b1ea7699cd17ff02
  $fNumDB_args :: [HOAS.DB HOAS.R]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (HOAS.DB HOAS.R)
                   HOAS.$fNumDB10 `cast` (Sym (HOAS.NTCo:DB[0] <HOAS.R>_P))
                   HOAS.$fNumDB8) -}
bbbc777b0207613d330a4ddc471e5f70
  $fNumDB_op :: Contract.Op
  {- HasNoCafRefs, Strictness: m13,
     Unfolding: (Contract.RLit HOAS.$fNumDB5) -}
27487bf9646183ebb941ec9e7977060a
  $fNumDB_op1 :: Contract.Op
  {- HasNoCafRefs, Strictness: m13,
     Unfolding: (Contract.RLit HOAS.$fNumDB7) -}
c02e3961e96f9df38f19fc43104f8d05
  $fShowContr :: GHC.Show.Show Contract.Contr
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Contract.Contr
                  HOAS.$fShowContr_$cshowsPrec
                  HOAS.$fShowContr_$cshow
                  HOAS.$fShowContr_$cshowList -}
bc0bbd10513cf9bdebf4042b08ea2ee1
  $fShowContr1 ::
    Contract.Contr -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2,
     Unfolding: (\ x :: Contract.Contr s :: GHC.Base.String[OneShot] ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   (PrettyPrinting.ppContr
                      HOAS.$fShowContr2
                      (GHC.Types.[] @ GHC.Types.Int)
                      x)
                   s) -}
9e45eddc2bc30e3671688af047e6aff4
  $fShowContr2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0) -}
591363937cc48dd6dd338171d3312d7b
  $fShowContr_$cshow :: Contract.Contr -> GHC.Base.String
  {- Arity: 1,
     Unfolding: (PrettyPrinting.ppContr
                   HOAS.$fShowContr2
                   (GHC.Types.[] @ GHC.Types.Int)) -}
12419f14e3ce1dba7d331835def929ab
  $fShowContr_$cshowList :: [Contract.Contr] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: (\ ls :: [Contract.Contr] s :: GHC.Base.String ->
                 GHC.Show.showList__ @ Contract.Contr HOAS.$fShowContr1 ls s) -}
1e39309cdd0d5379016a78005a962e7a
  $fShowContr_$cshowsPrec ::
    GHC.Types.Int -> Contract.Contr -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ ds :: GHC.Types.Int x :: Contract.Contr s :: GHC.Base.String ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                    GHC.Base.foldr
                      @ GHC.Types.Char
                      @ b
                      c
                      n
                      (PrettyPrinting.ppContr
                         HOAS.$fShowContr2
                         (GHC.Types.[] @ GHC.Types.Int)
                         x))
                   s) -}
ff8f316c40379b930e9776b03e3f658a
  $fShowExp :: GHC.Show.Show Contract.Exp
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Contract.Exp
                  HOAS.$fShowExp_$cshowsPrec
                  HOAS.$fShowExp_$cshow
                  HOAS.$fShowExp_$cshowList -}
60d04c24c2683328d847744c32bffa13
  $fShowExp1 :: Contract.Exp -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2,
     Unfolding: (\ x :: Contract.Exp s :: GHC.Base.String[OneShot] ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   (PrettyPrinting.ppExp
                      HOAS.$fShowContr2
                      (GHC.Types.[] @ GHC.Types.Int)
                      x)
                   s) -}
29f9231e24a93ee015ea391475804755
  $fShowExp_$cshow :: Contract.Exp -> GHC.Base.String
  {- Arity: 1,
     Unfolding: (PrettyPrinting.ppExp
                   HOAS.$fShowContr2
                   (GHC.Types.[] @ GHC.Types.Int)) -}
96de4e46c5d603f233be9061a10839ba
  $fShowExp_$cshowList :: [Contract.Exp] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: (\ ls :: [Contract.Exp] s :: GHC.Base.String ->
                 GHC.Show.showList__ @ Contract.Exp HOAS.$fShowExp1 ls s) -}
812768a69fcc2cb6135b2de49999c0a4
  $fShowExp_$cshowsPrec ::
    GHC.Types.Int -> Contract.Exp -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ ds :: GHC.Types.Int x :: Contract.Exp s :: GHC.Base.String ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                    GHC.Base.foldr
                      @ GHC.Types.Char
                      @ b
                      c
                      n
                      (PrettyPrinting.ppExp
                         HOAS.$fShowContr2
                         (GHC.Types.[] @ GHC.Types.Int)
                         x))
                   s) -}
1d2beb1d1f4092a3b1ea7699cd17ff02
  $wa ::
    HOAS.DB HOAS.R
    -> GHC.Types.Int -> (# Contract.Op, Contract.List Contract.Exp #)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>, Inline: [0],
     Unfolding: (\ w :: HOAS.DB HOAS.R w1 :: GHC.Types.Int ->
                 (# Contract.Cond,
                    GHC.Types.:
                      @ Contract.Exp
                      (Contract.OpE
                         Contract.Less
                         (GHC.Base.map
                            @ (HOAS.DB HOAS.R)
                            @ Contract.Exp
                            (\ x :: HOAS.DB HOAS.R -> x `cast` (HOAS.NTCo:DB[0] <HOAS.R>_P) w1)
                            (GHC.Types.: @ (HOAS.DB HOAS.R) w HOAS.$fNumDB11)))
                      (GHC.Types.:
                         @ Contract.Exp
                         (Contract.OpE
                            Contract.Sub
                            (GHC.Base.map
                               @ (HOAS.DB HOAS.R)
                               @ Contract.Exp
                               (\ x :: HOAS.DB HOAS.R -> x `cast` (HOAS.NTCo:DB[0] <HOAS.R>_P) w1)
                               HOAS.$fNumDB_args))
                         (GHC.Types.:
                            @ Contract.Exp
                            (Contract.OpE
                               Contract.Cond
                               (GHC.Types.:
                                  @ Contract.Exp
                                  (Contract.OpE
                                     Contract.Less
                                     (GHC.Base.map
                                        @ (HOAS.DB HOAS.R)
                                        @ Contract.Exp
                                        (\ x :: HOAS.DB HOAS.R ->
                                         x `cast` (HOAS.NTCo:DB[0] <HOAS.R>_P) w1)
                                        (GHC.Types.: @ (HOAS.DB HOAS.R) w HOAS.$fNumDB11)))
                                  HOAS.$fNumDB2))
                            (GHC.Types.[] @ Contract.Exp))) #)) -}
1d2beb1d1f4092a3b1ea7699cd17ff02
  $wa1 ::
    HOAS.DB HOAS.R
    -> GHC.Types.Int -> (# Contract.Op, Contract.List Contract.Exp #)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>, Inline: [0],
     Unfolding: (\ w :: HOAS.DB HOAS.R w1 :: GHC.Types.Int ->
                 (# Contract.Cond,
                    GHC.Types.:
                      @ Contract.Exp
                      (Contract.OpE
                         Contract.Less
                         (GHC.Base.map
                            @ (HOAS.DB HOAS.R)
                            @ Contract.Exp
                            (\ x :: HOAS.DB HOAS.R -> x `cast` (HOAS.NTCo:DB[0] <HOAS.R>_P) w1)
                            (GHC.Types.: @ (HOAS.DB HOAS.R) w HOAS.$fNumDB11)))
                      (GHC.Types.:
                         @ Contract.Exp
                         (Contract.OpE
                            Contract.Sub
                            (GHC.Base.map
                               @ (HOAS.DB HOAS.R)
                               @ Contract.Exp
                               (\ x :: HOAS.DB HOAS.R -> x `cast` (HOAS.NTCo:DB[0] <HOAS.R>_P) w1)
                               (GHC.Types.:
                                  @ (HOAS.DB HOAS.R)
                                  HOAS.$fNumDB14 `cast` (Sym (HOAS.NTCo:DB[0] <HOAS.R>_P))
                                  (GHC.Types.:
                                     @ (HOAS.DB HOAS.R)
                                     w
                                     (GHC.Types.[] @ (HOAS.DB HOAS.R))))))
                         (GHC.Types.:
                            @ Contract.Exp
                            (w `cast` (HOAS.NTCo:DB[0] <HOAS.R>_P) w1)
                            (GHC.Types.[] @ Contract.Exp))) #)) -}
f657e9283292b18d4ea24e7d64287672
  $wtoVar :: GHC.Prim.Int# -> Contract.Var
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>, Inline: [0] -}
38736f5544e5a01891f7467caa07da3e
  (&) :: HOAS.ContrHoas exp contr => contr -> contr -> contr
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLSLLLLLL),1*U(A,A,A,A,1*U,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ contr
                   @ (exp :: * -> *)
                   $dContrHoas :: HOAS.ContrHoas exp contr ->
                 HOAS.both @ exp @ contr $dContrHoas) -}
b7009fef581143a0e28439b7ff2069dc
  data B
    Promotable
320f98e163787e5ebe8eaace00550a27
  type BExp = HOAS.Exp HOAS.B
d6077ea00db3c0a9748d909d24c47403
  newtype CDB = CDB {unCDB :: GHC.Types.Int -> Contract.Contr}
41b09272fc4d23d4addccdd83f150c68
  type Contr =
    forall (exp :: * -> *) contr. HOAS.ContrHoas exp contr => contr
70b39d36af0ed9c7fc3ff750be42ca48
  class HOAS.ExpHoas exp =>
        ContrHoas (exp :: * -> *) contr | exp -> contr, contr -> exp where
    zero :: contr
    letc :: exp t -> (exp t -> contr) -> contr
    scale :: exp HOAS.R -> contr -> contr
    both :: contr -> contr -> contr
    transfer ::
      BaseTypes.Party -> BaseTypes.Party -> BaseTypes.Asset -> contr
    translate :: GHC.Types.Int -> contr -> contr
    translateT :: Contract.TExpr -> contr -> contr
    ifWithin :: exp HOAS.B -> GHC.Types.Int -> contr -> contr -> contr
    ifWithinT ::
      exp HOAS.B -> Contract.TExpr -> contr -> contr -> contr
    fromClosed :: Contract.Contr -> contr
1d2beb1d1f4092a3b1ea7699cd17ff02
  type role DB phantom
  newtype DB t = DB {unDB :: GHC.Types.Int -> Contract.Exp}
1ebe07472ebc532623f889fc374dcdee
  type Exp t = forall (exp :: * -> *). HOAS.ExpHoas exp => exp t
8681f28c922d9f67b0f5084de64fbc99
  class (GHC.Num.Num (exp HOAS.R), GHC.Real.Fractional (exp HOAS.R),
         HOAS.ExpHoas' exp) =>
        ExpHoas (exp :: * -> *)
8320adb176cf97a481636bd32842b5fe
  class ExpHoas' (exp :: * -> *) where
    ife :: exp HOAS.B -> exp t -> exp t -> exp t
    opE :: Contract.Op -> [exp t'] -> exp t
    obs :: Contract.ObsLabel -> GHC.Types.Int -> exp t
    acc :: (exp t -> exp t) -> GHC.Types.Int -> exp t -> exp t
ea70e4d138d72a601a60132767fc950b
  data R
    Promotable
29079cf3ff64b0117289796aa6826fe2
  type RExp = HOAS.Exp HOAS.R
b5d8c994efa616eb237daee1f2f2e07b
  bNot :: HOAS.ExpHoas exp => exp HOAS.B -> exp HOAS.B
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLS(LC(C(S))LL)),1*U(A,A,1*U(A,1*C1(C1(U)),A,A))><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ (exp :: * -> *)
                   $dExpHoas :: HOAS.ExpHoas exp
                   eta :: exp HOAS.B ->
                 HOAS.opE
                   @ exp
                   (HOAS.$p3ExpHoas @ exp $dExpHoas)
                   @ HOAS.B
                   @ HOAS.B
                   Contract.Not
                   (GHC.Types.: @ (exp HOAS.B) eta (GHC.Types.[] @ (exp HOAS.B)))) -}
efc2256f9dd82feb8906496e95f87ecb
  bObs ::
    HOAS.ExpHoas exp =>
    BaseTypes.BoolObs -> GHC.Types.Int -> exp HOAS.B
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LLS(LLC(C(S))L)),1*U(A,A,1*U(A,A,1*C1(C1(U)),A))><L,U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ (exp :: * -> *)
                   $dExpHoas :: HOAS.ExpHoas exp
                   eta :: BaseTypes.BoolObs
                   eta1 :: GHC.Types.Int ->
                 HOAS.obs
                   @ exp
                   (HOAS.$p3ExpHoas @ exp $dExpHoas)
                   @ HOAS.B
                   (Contract.LabB eta)
                   eta1) -}
9da62d3c63c8195f2bb561209d99115f
  false :: HOAS.BExp
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLS(LC(C(S))LL)),1*U(A,A,1*U(A,1*C1(C1(U)),A,A))>,
     Unfolding: InlineRule (1, True, False)
                (\ @ (exp :: * -> *) $dExpHoas :: HOAS.ExpHoas exp ->
                 HOAS.opE
                   @ exp
                   (HOAS.$p3ExpHoas @ exp $dExpHoas)
                   @ GHC.Prim.Any
                   @ HOAS.B
                   HOAS.false1
                   (GHC.Types.[] @ (exp GHC.Prim.Any))) -}
f29eaea6a167cee782b8eaffaacca60d
  false1 :: Contract.Op
  {- HasNoCafRefs, Strictness: m12,
     Unfolding: (Contract.BLit GHC.Types.False) -}
24c82b570e4ffd5b958cbfeaa2ce5e4f
  fromHoas :: HOAS.Contr -> Contract.Contr
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ t :: HOAS.Contr ->
                 (t @ HOAS.DB @ HOAS.CDB HOAS.$fContrHoasDBCDB)
                   `cast`
                 (HOAS.NTCo:CDB[0])
                   HOAS.$fShowContr2) -}
3e8b17a3bae40e3308028390ad23b98f
  iff ::
    HOAS.ContrHoas exp contr => exp HOAS.B -> contr -> contr -> contr
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLLLLLLLC(C(S))LL),1*U(A,A,A,A,A,A,A,A,1*C1(C1(U)),A,A)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ (exp :: * -> *)
                   @ contr
                   $dContrHoas :: HOAS.ContrHoas exp contr
                   e :: exp HOAS.B ->
                 HOAS.ifWithin @ exp @ contr $dContrHoas e HOAS.$fShowContr2) -}
a986cc284bf875ba3593d179a97f78f4
  rLit :: GHC.Types.Double -> HOAS.RExp
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U><S(LLS(LC(C(S))LL)),1*U(A,A,1*U(A,1*C1(C1(U)),A,A))>,
     Unfolding: InlineRule (2, True, False)
                (\ dk :: GHC.Types.Double
                   @ (exp :: * -> *)
                   $dExpHoas :: HOAS.ExpHoas exp ->
                 HOAS.opE
                   @ exp
                   (HOAS.$p3ExpHoas @ exp $dExpHoas)
                   @ GHC.Prim.Any
                   @ HOAS.R
                   (Contract.RLit dk)
                   (GHC.Types.[] @ (exp GHC.Prim.Any))) -}
33ca9c674a79874ed3e3e422529c808a
  rObs ::
    HOAS.ExpHoas exp =>
    BaseTypes.RealObs -> GHC.Types.Int -> exp HOAS.R
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LLS(LLC(C(S))L)),1*U(A,A,1*U(A,A,1*C1(C1(U)),A))><L,U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ (exp :: * -> *)
                   $dExpHoas :: HOAS.ExpHoas exp
                   eta :: BaseTypes.RealObs
                   eta1 :: GHC.Types.Int ->
                 HOAS.obs
                   @ exp
                   (HOAS.$p3ExpHoas @ exp $dExpHoas)
                   @ HOAS.R
                   (Contract.LabR eta)
                   eta1) -}
0badf4db4e662402d2d29dad7b3bebc6
  toHoas :: Contract.Contr -> HOAS.Contr
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U><S(LLLLLLLLLLC(S)),1*U(A,A,A,A,A,A,A,A,A,A,1*C1(U))>,
     Unfolding: InlineRule (2, True, True)
                (\ dk :: Contract.Contr
                   @ (exp :: * -> *)
                   @ contr
                   $dContrHoas :: HOAS.ContrHoas exp contr ->
                 HOAS.fromClosed @ exp @ contr $dContrHoas dk) -}
89ab7d20231926b44f9bd836521592b8
  toVar :: GHC.Types.Int -> Contract.Var
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: GHC.Types.Int ->
                 case w of ww { GHC.Types.I# ww1 -> HOAS.$wtoVar ww1 }) -}
a5c7fd19f1d915410c3aef0d439e5663
  true :: HOAS.BExp
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLS(LC(C(S))LL)),1*U(A,A,1*U(A,1*C1(C1(U)),A,A))>,
     Unfolding: InlineRule (1, True, False)
                (\ @ (exp :: * -> *) $dExpHoas :: HOAS.ExpHoas exp ->
                 HOAS.opE
                   @ exp
                   (HOAS.$p3ExpHoas @ exp $dExpHoas)
                   @ GHC.Prim.Any
                   @ HOAS.B
                   HOAS.true1
                   (GHC.Types.[] @ (exp GHC.Prim.Any))) -}
16ccfc32746638b6dbbeeec34b6b3167
  true1 :: Contract.Op
  {- HasNoCafRefs, Strictness: m12,
     Unfolding: (Contract.BLit GHC.Types.True) -}
d3b1486e6775279e78599f156ef6998a
  unCDB :: HOAS.CDB -> GHC.Types.Int -> Contract.Contr
  RecSel HOAS.CDB
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True)
                HOAS.unCDB1 `cast` (<HOAS.CDB>_R ->_R HOAS.NTCo:CDB[0]) -}
59b80d61c937c5697a452310f88ea783
  unCDB1 :: HOAS.CDB -> HOAS.CDB
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, True) (\ ds :: HOAS.CDB -> ds) -}
9fb3808496986b1c2ec8330d46a747f5
  unDB :: HOAS.DB t -> GHC.Types.Int -> Contract.Exp
  RecSel HOAS.DB
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True)
                HOAS.unDB1
                  `cast`
                (forall t. <HOAS.DB t>_R ->_R HOAS.NTCo:DB[0] <t>_P) -}
e9216efe7532fa5b3b802f60acb658fb
  unDB1 :: HOAS.DB t -> HOAS.DB t
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, True)
                (\ @ t ds :: HOAS.DB t -> ds) -}
instance HOAS.ContrHoas [HOAS.DB, HOAS.CDB] = HOAS.$fContrHoasDBCDB
instance HOAS.ExpHoas' [HOAS.DB] = HOAS.$fExpHoas'DB
instance HOAS.ExpHoas [HOAS.DB] = HOAS.$fExpHoasDB
instance GHC.Real.Fractional [HOAS.DB] = HOAS.$fFractionalDB
instance GHC.Num.Num [HOAS.DB] = HOAS.$fNumDB
instance GHC.Show.Show [Contract.Contr] = HOAS.$fShowContr
instance GHC.Show.Show [Contract.Exp] = HOAS.$fShowExp
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

