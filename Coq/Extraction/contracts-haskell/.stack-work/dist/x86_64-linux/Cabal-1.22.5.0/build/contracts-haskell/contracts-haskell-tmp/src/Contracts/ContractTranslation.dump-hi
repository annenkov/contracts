
==================== FINAL INTERFACE ====================
2018-04-08 09:58:11.193906 UTC

interface main@main:ContractTranslation 7103
  interface hash: 87d3a542b72770afa9e0bf0dcbb68bc5
  ABI hash: 0c2cd9e21a35e55fae8276ae6940ea24
  export-list hash: e4218f7cbb4ca60110d47ce9e9efa79a
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: e08a1e695a3d5701efe398d91e65cc68
  sig of: Nothing
  used TH splices: False
  where
exports:
  ContractTranslation.cutPayoff
  ContractTranslation.eval_payoff
  ContractTranslation.fromBVal
  ContractTranslation.fromContr
  ContractTranslation.fromExp
  ContractTranslation.fromExtEnv
  ContractTranslation.fromRVal
  ContractTranslation.fromVal
  ContractTranslation.iLBinOpSem
  ContractTranslation.iLTexprSem
  ContractTranslation.iLTexprSemZ
  ContractTranslation.iLUnOpSem
  ContractTranslation.iLsem
  ContractTranslation.loop_if_sem
  ContractTranslation.tsmartPlus'
  ContractTranslation.ILBinOp{ContractTranslation.ILAdd ContractTranslation.ILAnd ContractTranslation.ILDiv ContractTranslation.ILEqual ContractTranslation.ILLeq ContractTranslation.ILLess ContractTranslation.ILLessN ContractTranslation.ILMult ContractTranslation.ILOr ContractTranslation.ILSub}
  ContractTranslation.ILExpr{ContractTranslation.ILBinExpr ContractTranslation.ILBool ContractTranslation.ILFloat ContractTranslation.ILIf ContractTranslation.ILLoopIf ContractTranslation.ILModel ContractTranslation.ILNat ContractTranslation.ILNow ContractTranslation.ILPayoff ContractTranslation.ILUnExpr ContractTranslation.ILtexpr}
  ContractTranslation.ILTExpr{ContractTranslation.ILTexpr ContractTranslation.ILTplus}
  ContractTranslation.ILTExprZ{ContractTranslation.ILTexprZ ContractTranslation.ILTnumZ ContractTranslation.ILTplusZ}
  ContractTranslation.ILUnOp{ContractTranslation.ILNeg ContractTranslation.ILNot}
  ContractTranslation.ILVal{ContractTranslation.ILBVal ContractTranslation.ILNVal ContractTranslation.ILRVal}
module dependencies: BaseTypes Contract
package dependencies: array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA
                      base-4.8.2.0* containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU
                      deepseq-1.4.1.1@deeps_6vMKxt5sPFR0XsbRWvvq59 ghc-prim-0.4.0.0
                      integer-gmp-1.0.0.0
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Functor.Identity
                         base-4.8.2.0:Data.Monoid base-4.8.2.0:Data.Type.Equality
                         base-4.8.2.0:Data.Void base-4.8.2.0:GHC.Exts
                         base-4.8.2.0:GHC.Generics
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Set.Base
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.Enum debc6de3086023a15993ab0cecffb90b
import  -/  base-4.8.2.0:GHC.Num 9f42750c866f5832ca565146bd660c60
import  -/  base-4.8.2.0:GHC.Real 1281efa9baf803bc7859d7efb89a38b3
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
import  -/  BaseTypes 65c5f953f1981ab087685c5da86fba76
  exports: 23778ad265b8e00b4976c7375a9c4325
  Party dfcc89f4500c3c01e7f357657e35e437
import  -/  Contract a001d2d1dcba9b7dbff93220b44302c9
  exports: 03296e9aefab777c45a744199fc35678
  Add 73efea4c084a1d9a3a6c6d9e3fd09e54
  And eddba479febe1c4e4341607c24ca439f
  BLit 227ec0371043356d3fabb57e5b39630d
  BVal 223277297e85585ab21011c112c1ca11
  Both 37f71d6c3edba0e4c1eed54aef9f22c7
  Cond 50ca2b0b89e04ea3ceeafd81266127a2
  Contr 2b7cf2ff7abe4fab650faa1cd601f781
  Div 67c8deb0548b119b380a5d8390ef33ea
  Equal fa16c4c4ad7996bc920e78e1d3fcd23e
  Exp b1478d2a0af0ab23b8b9450d84006b6a
  ExtEnv' 2c36c4e4f545acd3b3bc6b9a472e6dee
  If 4a71ae2a22dbdbf18925f5a7fc8a67b5
  Leq 39f59e0946504d07702c2e53aca33898
  Less 654591f3520e180f2cf1a29d3ca5f45c
  Let 61bef3408cd960bb047fd385fb879c57
  Mult 0fbec099a8f25d1feffb35181cefdceb
  Neg 10124e8e948f3744bd8bd14508a9c1f2
  Not 2cd76820e4fa64f760b612e2befe6115
  Obs babd087d9016937058c8437afb05cd51
  ObsLabel 9eaec7e0150a3d9437c71b1eb0741d47
  OpE 60a10ff16360d779467c0feb6834d961
  Or 2d308a983bd56f06ed2a97f86a1ee704
  RLit 9b694dd3701606adfc98afef128d1ede
  RVal 4e994d352147cec72cc40eef53e6a251
  Scale 9778f7bc37aa3385d2b8c14453c0de8f
  Sub 32df2906535acb6f47a2a83750879f36
  TEnv 3dee5a45696566dd6f9150b11ca801da
  TExpr b6d3d122a20c7bad1349187712a593b3
  Tnum 8cb2d18a1db4771f2c9b55a16d715216
  Transfer 592bd9ce494fe8e6c632f6f2a93b0d8d
  Translate cc1de4b5c2c819003fd876e653fa956f
  Tvar 6384254a7faf76e34eb54b2c4dc085fa
  Val a65e4f73859840c0849db6d6dc7522c1
  Zero 804145a4f7c70e94267edbf29f647397
  texprSem 69ad79423cc0d41cb2415ac062ae29e2
d079be0d364dc0c3547d20671b1e6751
  data ILBinOp
    = ILAdd
    | ILSub
    | ILMult
    | ILDiv
    | ILAnd
    | ILOr
    | ILLess
    | ILLessN
    | ILLeq
    | ILEqual
    Promotable
1ffa1d30381fe72b5ea734a0e0192980
  data ILExpr
    = ILIf ContractTranslation.ILExpr
           ContractTranslation.ILExpr
           ContractTranslation.ILExpr
    | ILFloat GHC.Types.Double
    | ILNat GHC.Types.Int
    | ILBool GHC.Types.Bool
    | ILtexpr ContractTranslation.ILTExpr
    | ILNow
    | ILModel Contract.ObsLabel ContractTranslation.ILTExprZ
    | ILUnExpr ContractTranslation.ILUnOp ContractTranslation.ILExpr
    | ILBinExpr ContractTranslation.ILBinOp
                ContractTranslation.ILExpr
                ContractTranslation.ILExpr
    | ILLoopIf ContractTranslation.ILExpr
               ContractTranslation.ILExpr
               ContractTranslation.ILExpr
               Contract.TExpr
    | ILPayoff ContractTranslation.ILTExpr
               BaseTypes.Party
               BaseTypes.Party
a6e67f120041026a4bfa3391328f0043
  data ILTExpr
    = ILTplus ContractTranslation.ILTExpr ContractTranslation.ILTExpr
    | ILTexpr Contract.TExpr
ceb76b78f8e0631c00b7cf6483743f1b
  data ILTExprZ
    = ILTplusZ ContractTranslation.ILTExprZ
               ContractTranslation.ILTExprZ
    | ILTexprZ ContractTranslation.ILTExpr
    | ILTnumZ GHC.Types.Int
6fbb22c3aeb223ddf6e040bc91ba35a7
  data ILUnOp = ILNot | ILNeg
    Promotable
f8ce3c66aa291e43a09996bd4218d258
  data ILVal
    = ILBVal GHC.Types.Bool
    | ILRVal GHC.Types.Double
    | ILNVal GHC.Types.Int
876215596446eae40903a32f9b759e58
  cutPayoff ::
    ContractTranslation.ILExpr -> ContractTranslation.ILExpr
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
939ddd03d0c813940d34661266d4586f
  eval_payoff ::
    GHC.Types.Double
    -> BaseTypes.Party
    -> BaseTypes.Party
    -> BaseTypes.Party
    -> BaseTypes.Party
    -> ContractTranslation.ILVal
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,U(U)><S,U><S,U><S,U><L,U> -}
4d0bb872f2f0775151301f18724b3795
  fromBVal ::
    ContractTranslation.ILVal -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ v :: ContractTranslation.ILVal ->
                 case v of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   ContractTranslation.ILBVal v'
                   -> GHC.Base.Just @ GHC.Types.Bool v' }) -}
018d0423638dd793820f0c371a5fe31f
  fromContr ::
    Contract.Contr
    -> ContractTranslation.ILTExpr
    -> GHC.Base.Maybe ContractTranslation.ILExpr
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U> -}
111b8e4047bb4e3d54d6cabb4e0a022b
  fromExp ::
    ContractTranslation.ILTExprZ
    -> Contract.Exp -> GHC.Base.Maybe ContractTranslation.ILExpr
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U> -}
d420d0e0bd6101549c4d0db28aac4e14
  fromExtEnv ::
    Contract.ExtEnv' Contract.Val
    -> Contract.ObsLabel -> GHC.Types.Int -> ContractTranslation.ILVal
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(C(S)),1*C1(C1(U))><L,U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ extC :: Contract.ExtEnv' Contract.Val
                   l :: Contract.ObsLabel
                   t :: GHC.Types.Int ->
                 case extC l t of wild {
                   Contract.BVal b -> ContractTranslation.ILBVal b
                   Contract.RVal r -> ContractTranslation.ILRVal r }) -}
61203434294e7ffeebacdf8d77dae1bb
  fromRVal ::
    ContractTranslation.ILVal -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ v :: ContractTranslation.ILVal ->
                 case v of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Double
                   ContractTranslation.ILRVal v'
                   -> GHC.Base.Just @ GHC.Types.Double v' }) -}
c3bcf7e48b54f53e23cea3c744e70555
  fromVal :: Contract.Val -> ContractTranslation.ILVal
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ v :: Contract.Val ->
                 case v of wild {
                   Contract.BVal b -> ContractTranslation.ILBVal b
                   Contract.RVal r -> ContractTranslation.ILRVal r }) -}
79868366bd51547afc2cf47bb64f1301
  iLBinOpSem ::
    ContractTranslation.ILBinOp
    -> ContractTranslation.ILVal
    -> ContractTranslation.ILVal
    -> GHC.Base.Maybe ContractTranslation.ILVal
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><S,1*U><L,1*U>,
     Unfolding: (\ op :: ContractTranslation.ILBinOp
                   v1 :: ContractTranslation.ILVal
                   v2 :: ContractTranslation.ILVal ->
                 case op of wild {
                   ContractTranslation.ILAdd
                   -> case v1 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ ContractTranslation.ILVal
                        ContractTranslation.ILRVal v1'
                        -> case v2 of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ ContractTranslation.ILVal
                             ContractTranslation.ILRVal v2'
                             -> GHC.Base.Just
                                  @ ContractTranslation.ILVal
                                  (ContractTranslation.ILRVal (GHC.Float.plusDouble v1' v2')) } }
                   ContractTranslation.ILSub
                   -> case v1 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ ContractTranslation.ILVal
                        ContractTranslation.ILRVal v1'
                        -> case v2 of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ ContractTranslation.ILVal
                             ContractTranslation.ILRVal v2'
                             -> GHC.Base.Just
                                  @ ContractTranslation.ILVal
                                  (ContractTranslation.ILRVal (GHC.Float.minusDouble v1' v2')) } }
                   ContractTranslation.ILMult
                   -> case v1 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ ContractTranslation.ILVal
                        ContractTranslation.ILRVal v1'
                        -> case v2 of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ ContractTranslation.ILVal
                             ContractTranslation.ILRVal v2'
                             -> GHC.Base.Just
                                  @ ContractTranslation.ILVal
                                  (ContractTranslation.ILRVal (GHC.Float.timesDouble v1' v2')) } }
                   ContractTranslation.ILDiv
                   -> case v1 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ ContractTranslation.ILVal
                        ContractTranslation.ILRVal v1'
                        -> case v2 of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ ContractTranslation.ILVal
                             ContractTranslation.ILRVal v2'
                             -> GHC.Base.Just
                                  @ ContractTranslation.ILVal
                                  (ContractTranslation.ILRVal (GHC.Float.divideDouble v1' v2')) } }
                   ContractTranslation.ILAnd
                   -> case v1 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ ContractTranslation.ILVal
                        ContractTranslation.ILBVal v1'
                        -> case v2 of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ ContractTranslation.ILVal
                             ContractTranslation.ILBVal v2'
                             -> GHC.Base.Just
                                  @ ContractTranslation.ILVal
                                  (ContractTranslation.ILBVal (GHC.Classes.&& v1' v2')) } }
                   ContractTranslation.ILOr
                   -> case v1 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ ContractTranslation.ILVal
                        ContractTranslation.ILBVal v1'
                        -> case v2 of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ ContractTranslation.ILVal
                             ContractTranslation.ILBVal v2'
                             -> GHC.Base.Just
                                  @ ContractTranslation.ILVal
                                  (ContractTranslation.ILBVal (GHC.Classes.|| v1' v2')) } }
                   ContractTranslation.ILLess
                   -> case v1 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ ContractTranslation.ILVal
                        ContractTranslation.ILRVal v1'
                        -> case v2 of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ ContractTranslation.ILVal
                             ContractTranslation.ILRVal v2'
                             -> GHC.Base.Just
                                  @ ContractTranslation.ILVal
                                  (ContractTranslation.ILBVal
                                     (GHC.Classes.$fOrdDouble_$c< v1' v2')) } }
                   ContractTranslation.ILLessN
                   -> case v1 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ ContractTranslation.ILVal
                        ContractTranslation.ILNVal n1
                        -> case v2 of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ ContractTranslation.ILVal
                             ContractTranslation.ILNVal n2
                             -> GHC.Base.Just
                                  @ ContractTranslation.ILVal
                                  (ContractTranslation.ILBVal (GHC.Classes.ltInt n1 n2)) } }
                   ContractTranslation.ILLeq
                   -> case v1 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ ContractTranslation.ILVal
                        ContractTranslation.ILRVal v1'
                        -> case v2 of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ ContractTranslation.ILVal
                             ContractTranslation.ILRVal v2'
                             -> GHC.Base.Just
                                  @ ContractTranslation.ILVal
                                  (ContractTranslation.ILBVal
                                     (GHC.Classes.$fOrdDouble_$c<= v1' v2')) } }
                   ContractTranslation.ILEqual
                   -> case v1 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ ContractTranslation.ILVal
                        ContractTranslation.ILRVal v1'
                        -> case v2 of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ ContractTranslation.ILVal
                             ContractTranslation.ILRVal v2'
                             -> GHC.Base.Just
                                  @ ContractTranslation.ILVal
                                  (ContractTranslation.ILBVal
                                     (GHC.Classes.$fEqDouble_$c== v1' v2')) } } }) -}
69586a78897e7d64bc4ea5566891e3f4
  iLTexprSem ::
    ContractTranslation.ILTExpr -> Contract.TEnv -> GHC.Types.Int
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,C(U(U))> -}
341a165c684cbbabf8caa3c28c5a612a
  iLTexprSemZ ::
    ContractTranslation.ILTExprZ -> Contract.TEnv -> GHC.Types.Int
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,C(U(U))> -}
a33435b3dceb9f6437eff6b071d391e5
  iLUnOpSem ::
    ContractTranslation.ILUnOp
    -> ContractTranslation.ILVal
    -> GHC.Base.Maybe ContractTranslation.ILVal
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ op :: ContractTranslation.ILUnOp
                   v :: ContractTranslation.ILVal ->
                 case op of wild {
                   ContractTranslation.ILNot
                   -> case v of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ ContractTranslation.ILVal
                        ContractTranslation.ILBVal v'
                        -> GHC.Base.Just
                             @ ContractTranslation.ILVal
                             (ContractTranslation.ILBVal (GHC.Classes.not v')) }
                   ContractTranslation.ILNeg
                   -> case v of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ ContractTranslation.ILVal
                        ContractTranslation.ILRVal v'
                        -> GHC.Base.Just
                             @ ContractTranslation.ILVal
                             (ContractTranslation.ILRVal (GHC.Float.negateDouble v')) } }) -}
877c5fd25b3f5c2aee99babba6949a82
  iLsem ::
    ContractTranslation.ILExpr
    -> Contract.ExtEnv' ContractTranslation.ILVal
    -> Contract.TEnv
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> (GHC.Types.Int -> GHC.Types.Double)
    -> BaseTypes.Party
    -> BaseTypes.Party
    -> GHC.Base.Maybe ContractTranslation.ILVal
  {- Arity: 8,
     Strictness: <S,1*U><L,C(C1(U))><L,C(U(U))><L,U(U)><L,U><L,C(U(U))><L,U><L,U> -}
9d9cead80f19af2ddf0753385325e5d3
  loop_if_sem ::
    GHC.Types.Int
    -> GHC.Types.Int
    -> (GHC.Types.Int -> GHC.Base.Maybe ContractTranslation.ILVal)
    -> (GHC.Types.Int -> GHC.Base.Maybe ContractTranslation.ILVal)
    -> (GHC.Types.Int -> GHC.Base.Maybe ContractTranslation.ILVal)
    -> GHC.Base.Maybe ContractTranslation.ILVal
  {- Arity: 5,
     Strictness: <L,1*U(1*U)><L,U(U)><C(S),C(U)><L,1*C1(U)><L,1*C1(U)> -}
e3161263b385d79b12a9e89d75f6dd8b
  tsmartPlus' ::
    ContractTranslation.ILTExpr
    -> ContractTranslation.ILTExpr -> ContractTranslation.ILTExpr
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>,
     Unfolding: (\ e1 :: ContractTranslation.ILTExpr
                   e2 :: ContractTranslation.ILTExpr ->
                 case e1 of wild {
                   ContractTranslation.ILTplus ds ds1
                   -> ContractTranslation.ILTplus wild e2
                   ContractTranslation.ILTexpr e
                   -> case e of wild1 {
                        Contract.Tvar ds -> ContractTranslation.ILTplus wild e2
                        Contract.Tnum n1
                        -> case e2 of wild2 {
                             ContractTranslation.ILTplus ds ds1
                             -> ContractTranslation.ILTplus wild wild2
                             ContractTranslation.ILTexpr e0
                             -> case e0 of wild3 {
                                  Contract.Tvar ds -> ContractTranslation.ILTplus wild wild2
                                  Contract.Tnum n2
                                  -> ContractTranslation.ILTexpr
                                       (Contract.Tnum (GHC.Num.$fNumInt_$c+ n1 n2)) } } } }) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

